"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const constants_1 = require("./constants");
const incoming_digest_dto_1 = require("./dto/client/incoming-digest.dto");
const outgoing_digest_dto_1 = require("./dto/client/outgoing-digest.dto");
const outgoing_transform_digest_dto_1 = require("./dto/client/outgoing-transform-digest.dto");
const payload_dto_1 = require("./dto/client/payload.dto");
const cn_1 = require("./encryptions/cn");
const h1_1 = require("./encryptions/h1");
const h2_1 = require("./encryptions/h2");
const nonce_1 = require("./encryptions/nonce");
const response_1 = require("./encryptions/response");
const analyze_exception_1 = require("./exceptions/analyze-exception");
const base_exception_1 = require("./exceptions/base-exception");
const header_1 = require("./header");
const dto_1 = require("./utils/dto");
class ClientDigestAuth {
    static analyze(header, multipleAuthentication = false) {
        try {
            const challenges = header_1.Header.parse(header);
            const analyzeChallenges = challenges.map((challenge) => {
                if (challenge.scheme !== header_1.SCHEME_DIGEST)
                    return Object.assign({}, lodash_1.pick(challenge, ['scheme', 'raw']));
                const digest = dto_1.Dto.validate(incoming_digest_dto_1.IncomingDigestDto, challenge);
                return Object.assign({}, digest);
            });
            if (multipleAuthentication)
                return analyzeChallenges;
            const firstDigest = lodash_1.find(analyzeChallenges, { scheme: header_1.SCHEME_DIGEST });
            if (!firstDigest)
                throw new analyze_exception_1.AnalyzeException(analyze_exception_1.NOT_ALLOW_DIGEST);
            return firstDigest;
        }
        catch (e) {
            if (e instanceof base_exception_1.BaseException)
                throw e;
            throw new analyze_exception_1.AnalyzeException(analyze_exception_1.ANALYZE_CODE_UNEXPECTED);
        }
    }
    static generateUnprotected(serverDigest, username, password, payload) {
        const validPayload = dto_1.Dto.validate(payload_dto_1.PayloadUnprotectedDto, payload);
        const h1 = h1_1.HA1.generate(username, password, serverDigest.realm);
        const h2 = h2_1.HA2.generate(validPayload.method, validPayload.uri);
        const response = response_1.Response.generate(h1, serverDigest.nonce, h2);
        const digest = dto_1.Dto.validate(outgoing_digest_dto_1.OutgoingUnprotectedDigestDto, { nonce: serverDigest.nonce, realm: serverDigest.realm, response, username });
        return Object.assign({}, digest, { raw: header_1.Header.generate(Object.assign({}, dto_1.Dto.validate(outgoing_transform_digest_dto_1.OutgoingTransformUnprotectedDigestDto, digest))) });
    }
    static generateProtectionAuth(serverDigest, username, password, payload) {
        return this.generateQOP(Object.assign({}, serverDigest, { qop: constants_1.QOP_AUTH }), username, password, dto_1.Dto.validate(payload_dto_1.PayloadProtectionAuthDto, Object.assign({}, payload, { entryBody: '' })));
    }
    static generateProtectionAuthInt(serverDigest, username, password, payload) {
        return this.generateQOP(Object.assign({}, serverDigest, { qop: constants_1.QOP_AUTH_INT }), username, password, dto_1.Dto.validate(payload_dto_1.PayloadProtectionAuthIntDto, payload));
    }
    static generateQOP(serverDigest, username, password, payload) {
        const cnonce = nonce_1.Nonce.generate();
        const nc = cn_1.Cn.toHex(payload.counter);
        const algorithm = (payload.force_algorithm)
            ? payload.force_algorithm
            : serverDigest.algorithm || constants_1.ALGORITHM_MD5;
        const initialH1 = h1_1.HA1.generate(username, password, serverDigest.realm);
        const h1 = (algorithm === constants_1.ALGORITHM_MD5_SESS)
            ? h1_1.HA1.generateSess(initialH1, serverDigest.nonce, cnonce)
            : initialH1;
        const h2 = (serverDigest.qop === constants_1.QOP_AUTH_INT)
            ? h2_1.HA2.generateInt(payload.method, payload.uri, payload.entryBody)
            : h2_1.HA2.generate(payload.method, payload.uri);
        const response = response_1.Response.generateProtected(h1, serverDigest.nonce, h2, nc, cnonce, serverDigest.qop);
        const digest = dto_1.Dto.validate(outgoing_digest_dto_1.OutgoingProtectedDigestDto, {
            nonce: serverDigest.nonce,
            realm: serverDigest.realm,
            opaque: serverDigest.opaque,
            algorithm,
            qop: serverDigest.qop,
            uri: payload.uri,
            response,
            username,
            cnonce,
            nc
        });
        return Object.assign({}, digest, { raw: header_1.Header.generate(Object.assign({}, dto_1.Dto.validate(outgoing_transform_digest_dto_1.OutgoingTransformProtectedDigestDto, digest))) });
    }
}
exports.ClientDigestAuth = ClientDigestAuth;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LWRpZ2VzdC1hdXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9jbGllbnQtZGlnZXN0LWF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBa0M7QUFDbEMsMkNBQXNGO0FBQ3RGLDBFQUFtRTtBQUNuRSwwRUFBMEc7QUFDMUcsOEZBR29EO0FBQ3BELDBEQUFzSDtBQUN0SCx5Q0FBb0M7QUFDcEMseUNBQXFDO0FBQ3JDLHlDQUFxQztBQUNyQywrQ0FBMEM7QUFDMUMscURBQWdEO0FBQ2hELHNFQUl3QztBQUN4QyxnRUFBNEQ7QUFDNUQscUNBQWlEO0FBV2pELHFDQUFnQztBQUVoQyxNQUFhLGdCQUFnQjtJQUdwQixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWMsRUFBRSx5QkFBa0MsS0FBSztRQUMzRSxJQUFJO1lBQ0YsTUFBTSxVQUFVLEdBQUcsZUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4QyxNQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDckQsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLHNCQUFhO29CQUNwQyx5QkFBVyxhQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBRWpELE1BQU0sTUFBTSxHQUFpQixTQUFHLENBQUMsUUFBUSxDQUFDLHVDQUFpQixFQUFFLFNBQW9CLENBQWlCLENBQUM7Z0JBRW5HLHlCQUFZLE1BQU0sRUFBRTtZQUN0QixDQUFDLENBQUMsQ0FBQztZQUVILElBQUksc0JBQXNCO2dCQUN4QixPQUFPLGlCQUFpQixDQUFDO1lBRTNCLE1BQU0sV0FBVyxHQUFHLGFBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFDLE1BQU0sRUFBRSxzQkFBYSxFQUFDLENBQWlCLENBQUM7WUFDckYsSUFBSSxDQUFDLFdBQVc7Z0JBQ2QsTUFB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