"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const lodash_1 = require("lodash");
const constants_1 = require("./constants");
const incoming_digest_dto_1 = require("./dto/server/incoming-digest.dto");
const outgoing_digest_dto_1 = require("./dto/server/outgoing-digest.dto");
const outgoing_transform_digest_dto_1 = require("./dto/server/outgoing-transform-digest.dto");
const h1_1 = require("./encryptions/h1");
const h2_1 = require("./encryptions/h2");
const nonce_1 = require("./encryptions/nonce");
const response_1 = require("./encryptions/response");
const analyze_exception_1 = require("./exceptions/analyze-exception");
const base_exception_1 = require("./exceptions/base-exception");
const generate_response_exception_1 = require("./exceptions/generate-response.exception");
const header_1 = require("./header");
;
const dto_1 = require("./utils/dto");
class ServerDigestAuth {
    static analyze(header, allowQop, multipleAuthentication = false) {
        try {
            const challenges = header_1.Header.parse(header);
            const analyzeChallenges = challenges.map((challenge) => {
                if (challenge.scheme !== header_1.SCHEME_DIGEST)
                    return Object.assign({}, lodash_1.pick(challenge, ['scheme', 'raw']));
                const digest = dto_1.Dto.validate(incoming_digest_dto_1.IncomingDigestDto, challenge);
                if (allowQop === false && !lodash_1.isUndefined(digest.qop))
                    throw new analyze_exception_1.AnalyzeException(analyze_exception_1.ANALYZE_CODE_NOT_SUPPORT_QOP);
                if (allowQop !== false && !new class_validator_1.Validator().isIn(digest.qop, [...allowQop]))
                    throw new analyze_exception_1.AnalyzeException(analyze_exception_1.ANALYZE_CODE_NOT_SUPPORT_QOP);
                return Object.assign({}, digest);
            });
            if (multipleAuthentication)
                return analyzeChallenges;
            const firstDigest = lodash_1.find(analyzeChallenges, { scheme: header_1.SCHEME_DIGEST });
            if (!firstDigest)
                throw new analyze_exception_1.AnalyzeException(analyze_exception_1.NOT_ALLOW_DIGEST);
            return firstDigest;
        }
        catch (e) {
            if (e instanceof analyze_exception_1.AnalyzeException)
                throw e;
            throw new analyze_exception_1.AnalyzeException(analyze_exception_1.ANALYZE_CODE_UNEXPECTED);
        }
    }
    static verifyByPassword(digest, password, payload) {
        return this.verifyBySecret(digest, h1_1.HA1.generate(digest.username, password, digest.realm), payload);
    }
    static verifyBySecret(digest, secret, payload) {
        const h1 = (digest.algorithm === constants_1.ALGORITHM_MD5_SESS)
            ? h1_1.HA1.generateSess(secret, digest.nonce, digest.cnonce)
            : secret;
        const h2 = (digest.qop === constants_1.QOP_AUTH_INT)
            ? h2_1.HA2.generateInt(payload.method, payload.uri, payload.entryBody)
            : h2_1.HA2.generate(payload.method, payload.uri);
        const response = (!digest.qop)
            ? response_1.Response.generate(h1, digest.nonce, h2)
            : response_1.Response.generateProtected(h1, digest.nonce, h2, digest.nc, digest.cnonce, digest.qop);
        return (response === digest.response);
    }
    static generateResponse(realm, option = {}) {
        try {
            const plainDigest = Object.assign({ realm }, option, { nonce: nonce_1.Nonce.generate() });
            const digest = dto_1.Dto.validate(outgoing_digest_dto_1.OutgoingDigestDto, plainDigest);
            const finalDigest = class_transformer_1.plainToClass(outgoing_transform_digest_dto_1.OutgoingTransformDigestDto, plainDigest, { strategy: "excludeAll" });
            return Object.assign({}, digest, { raw: header_1.Header.generate(lodash_1.omitBy(finalDigest, lodash_1.isUndefined)) });
        }
        catch (e) {
            if (e instanceof base_exception_1.BaseException)
                throw e;
            throw new generate_response_exception_1.GenerateResponseException(generate_response_exception_1.GENERATE_RESPONSE_CODE_UNEXPECTED);
        }
    }
}
exports.ServerDigestAuth = ServerDigestAuth;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWRpZ2VzdC1hdXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zZXJ2ZXItZGlnZXN0LWF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBK0M7QUFDL0MscURBQTBDO0FBQzFDLG1DQUF5RDtBQUN6RCwyQ0FBNkQ7QUFDN0QsMEVBQW1FO0FBQ25FLDBFQUFtRTtBQUNuRSw4RkFBd0Y7QUFDeEYseUNBQXFDO0FBQ3JDLHlDQUFxQztBQUNyQywrQ0FBMEM7QUFDMUMscURBQWdEO0FBQ2hELHNFQUl3QztBQUN4QyxnRUFBNEQ7QUFDNUQsMEZBR2tEO0FBQ2xELHFDQUFpRDtBQUFBLENBQUM7QUFLbEQscUNBQWtDO0FBRWxDLE1BQWEsZ0JBQWdCO0lBR3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBYyxFQUFFLFFBQXVDLEVBQUUseUJBQWtDLEtBQUs7UUFDcEgsSUFBSTtZQUNGLE1BQU0sVUFBVSxHQUFHLGVBQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEMsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0JBQ3JELElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxzQkFBYTtvQkFDcEMseUJBQVcsYUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUVqRCxNQUFNLE1BQU0sR0FBc0IsU0FBRyxDQUFDLFFBQVEsQ0FBQyx1Q0FBaUIsRUFBRSxTQUFvQixDQUFzQixDQUFDO2dCQUU3RyxJQUFJLFFBQVEsS0FBSyxLQUFLLElBQUksQ0FBQyxvQkFBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7b0JBQ2hELE1BQU0sSUFBSSxvQ0FBZ0IsQ0FBQyxnREFBNEIsQ0FBQyxDQUFDO2dCQUUzRCxJQUFJLFFBQVEsS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLDJCQUFT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