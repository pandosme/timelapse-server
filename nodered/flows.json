[
    {
        "id": "cff0ca7eba0f8f68",
        "type": "tab",
        "label": "Recordings",
        "disabled": false,
        "info": ""
    },
    {
        "id": "596071a8177474d8",
        "type": "tab",
        "label": "Timelapse",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5a714ef6fcfb4261",
        "type": "tab",
        "label": "Create",
        "disabled": false,
        "info": ""
    },
    {
        "id": "db85d9978b91dbd7",
        "type": "tab",
        "label": "Modify",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2d9ef7a6281fe338",
        "type": "tab",
        "label": "Add Image",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1e258526bb8f28b2",
        "type": "tab",
        "label": "Auto-Save",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e5130f511bd00d68",
        "type": "subflow",
        "name": "Create Timelapse",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "7174fc08b6f9f06d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1520,
                "y": 100,
                "wires": [
                    {
                        "id": "98f888330985eebe",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a560a3dc68a59bb3",
        "type": "subflow",
        "name": "Save Timelapse",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "15295f753c12200b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1600,
                "y": 200,
                "wires": [
                    {
                        "id": "d96bcd4c98464d4a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9ce50e8fbc15bf60",
        "type": "subflow",
        "name": "Export JPEG",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "3059bf3837f268a2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1600,
                "y": 60,
                "wires": [
                    {
                        "id": "173e24ca4eee3dbe",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1600,
                "y": 120,
                "wires": [
                    {
                        "id": "173e24ca4eee3dbe",
                        "port": 1
                    },
                    {
                        "id": "5d35533857628768",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "eb92079299997bd1",
        "type": "subflow",
        "name": "Remove Recording",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e08ca02b4f5a4da2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 80,
                "wires": [
                    {
                        "id": "cb985d1f52e955ad",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6f852839f990ba1f",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "5853939997be9702",
        "type": "ui_tab",
        "name": "Timelapse",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c7561ec130ac6106",
        "type": "ui_group",
        "name": "Active timelapse recordings",
        "tab": "5853939997be9702",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false
    },
    {
        "id": "f94e782070da663f",
        "type": "ui_tab",
        "name": "Recordings",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6d0232f0fd507b32",
        "type": "ui_group",
        "name": "List",
        "tab": "f94e782070da663f",
        "order": 1,
        "disp": false,
        "width": "17",
        "collapse": false
    },
    {
        "id": "0ffcaad6cb652fe4",
        "type": "ui_tab",
        "name": "Create",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "03807f88fd5be3bd",
        "type": "ui_group",
        "name": "Create",
        "tab": "0ffcaad6cb652fe4",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d6c08c6b997f37b8",
        "type": "ui_tab",
        "name": "Modify",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "954043ed7a4ec686",
        "type": "ui_group",
        "name": "Default",
        "tab": "d6c08c6b997f37b8",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a7a38a3bd756ddea",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "For Debug purpose: Parse AVI Header",
        "func": "function fromLILEND( buf, dword ) {\n    var pos = dword * 4;\n     return (buf[pos+3] << 24) + (buf[pos+2] << 16) + (buf[pos+1] << 8) + buf[pos];\n}\n\nfunction fromFOURCC( buf, dword) {\n    return buf.toString('utf8', dword*4, (dword*4) + 4);\n}\n\ntheBuffer = msg.payload;\n\ndata = {};\n\ndata.LIST_RIFF = fromFOURCC(theBuffer,0);\ndata.RIFF_size = fromLILEND(theBuffer,1);\ndata.RIFF_FOURCC = fromFOURCC(theBuffer,2);\ndata.LIST_HDRL = fromFOURCC(theBuffer,3);\ndata.hdrl_size = fromLILEND(theBuffer,4);\ndata.hdrl_name = fromFOURCC(theBuffer,5);\ndata.avih = fromFOURCC(theBuffer,6);\ndata.avih_size = fromLILEND(theBuffer,7);\ndata.AVIH_MicroSecPerFrame = fromLILEND(theBuffer,8);\ndata.AVIH_MaxBytesPerSec = fromLILEND(theBuffer,9);\ndata.AVIH_PaddingGranularity = fromLILEND(theBuffer,10);\ndata.AVIH_Flags = fromLILEND(theBuffer,11);\ndata.AVIH_TotalFrames = fromLILEND(theBuffer,12);\ndata.AVIH_InitialFrames = fromLILEND(theBuffer,13);\ndata.AVIH_Streams = fromLILEND(theBuffer,14);\ndata.AVIH_SugestedBufferSize = fromLILEND(theBuffer,15);\ndata.AVIH_Width = fromLILEND(theBuffer,16);\ndata.AVIH_Height = fromLILEND(theBuffer,17);\ndata.AVIH_Reserved1 = fromLILEND(theBuffer,18);\ndata.AVIH_Reserved2 = fromLILEND(theBuffer,19);\ndata.AVIH_Reserved3 = fromLILEND(theBuffer,20);\ndata.AVIH_Reserved4 = fromLILEND(theBuffer,21);\ndata.LIST_strl = fromFOURCC(theBuffer,22);\ndata.LIST_strl_size = fromLILEND(theBuffer,23);\ndata.LIST_strl_name = fromFOURCC(theBuffer,24);\ndata.STRH_name = fromFOURCC(theBuffer,25);\ndata.STRH_size = fromLILEND(theBuffer,26);\ndata.strh_fccType = fromFOURCC(theBuffer,27);\ndata.strh_fccHandler = fromFOURCC(theBuffer,28);\ndata.strh_flags = fromLILEND(theBuffer,29);\ndata.strh_priority = fromLILEND(theBuffer,30);\ndata.strh_init_frames  = fromLILEND(theBuffer,31);\ndata.strh_scale = fromLILEND(theBuffer,32);\ndata.strh_rate = fromLILEND(theBuffer,33);\ndata.strh_start = fromLILEND(theBuffer,34);\ndata.strh_length = fromLILEND(theBuffer,35);\ndata.strh_sugg_buff_sz = fromLILEND(theBuffer,36);\ndata.strh_quality = fromLILEND(theBuffer,37);\ndata.strh_sample_sz = fromLILEND(theBuffer,38);\ndata.LIST_strf = fromFOURCC(theBuffer,39);\ndata.strf_size_list = fromLILEND(theBuffer,40);\ndata.strf_size = fromLILEND(theBuffer,41);\ndata.strf_width = fromLILEND(theBuffer,42);\ndata.strf_height = fromLILEND(theBuffer,43);\ndata.strf_planes_bit_cnt = fromLILEND(theBuffer,44);\ndata.strf_compression = fromFOURCC(theBuffer,45);\ndata.strf_image_size = fromLILEND(theBuffer,46);\ndata.strf_xpels_meter = fromLILEND(theBuffer,47);\ndata.strf_ypels_meter = fromLILEND(theBuffer,48);\ndata.strf_num_colors = fromLILEND(theBuffer,49);\ndata.strf_imp_colors = fromLILEND(theBuffer,50);\ndata.LIST_ODML = fromFOURCC(theBuffer,51);\ndata.LIST_ODML_Size = fromLILEND(theBuffer,52);\ndata.LIST_ODML_type = fromFOURCC(theBuffer,53);\ndata.odml_fourCC = fromFOURCC(theBuffer,54);\ndata.odml_size = fromLILEND(theBuffer,55);\ndata.odml_frames = fromLILEND(theBuffer,56);\ndata.LIST_movi = fromFOURCC(theBuffer,57);\ndata.LIST_movi_size = fromLILEND(theBuffer,58);\ndata.LIST_movi_name = fromFOURCC(theBuffer,59);\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d130a0bc6221c94f",
        "type": "function",
        "z": "596071a8177474d8",
        "name": "List",
        "func": "list = [];\n\n\nfor( var id in msg.payload ) {\n    var item = JSON.parse(JSON.stringify(msg.payload[id]));\n    \n    size = parseInt(msg.payload[id].size / 1024);\n    filesize = size + \" KB\";\n    if( size > 1024 ) {\n        size = size / 1024;\n        filesize = size.toFixed(2) + \" MB\";\n    }\n    if( size > 1024 ) {\n        size = size / 1024;\n        filesize = sizesize.toFixed(2) + \" GB\";\n    }\n    f = new Date(msg.payload[id].first);\n    l = new Date(msg.payload[id].last);\n\n    \n    item.href = '<a href=\"' + msg.payload[id].url + '\">' + msg.payload[id].name + '</a>';\n    item.size = filesize;\n    item.firstDate = f.getFullYear() + \"-\" + (\"00\"+(f.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+f.getDate()).substr(-2,2);\n    item.lastDate = l.getFullYear() + \"-\" + (\"00\"+(l.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+l.getDate()).substr(-2,2);\n    if( !msg.payload[id].first ) {\n        item.firstDate = \"\";\n        item.lastDate = \"\";\n    }\n        \n    list.push(item);\n}\n\nmsg.payload = list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 100,
        "wires": [
            [
                "2852aa493536aa68"
            ]
        ]
    },
    {
        "id": "47142e0d89ef9c11",
        "type": "link in",
        "z": "596071a8177474d8",
        "name": "Timelapse list refresh",
        "links": [
            "193d25d7e50daa53",
            "19d4a9447f818af2",
            "43646cba746e093a",
            "75e365a6c2fa1794",
            "8ecc036f108018ff",
            "e8299d0579350bef",
            "ed614f86465ed9a2",
            "bf7e99355fe516c6",
            "112c53fed885877c"
        ],
        "x": 455,
        "y": 160,
        "wires": [
            [
                "a247da1adf468e1a"
            ]
        ]
    },
    {
        "id": "f3785d4fcc6e8cf3",
        "type": "ui_table",
        "z": "596071a8177474d8",
        "group": "c7561ec130ac6106",
        "name": "",
        "order": 3,
        "width": "20",
        "height": "13",
        "columns": [
            {
                "field": "name",
                "title": "Name",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "frames",
                "title": "Frames",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "size",
                "title": "Size",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "fps",
                "title": "FPS",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "resolution",
                "title": "Resolution",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastDate",
                "title": "Last",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "firstDate",
                "title": "First",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "archive",
                "title": "Auto-save",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "retention",
                "title": "Retention",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "6d1352661443c50f"
            ]
        ]
    },
    {
        "id": "59bd343cd59d56ab",
        "type": "function",
        "z": "cff0ca7eba0f8f68",
        "name": "List",
        "func": "list = [];\nmsg.payload.forEach(function(item){\n    size = parseInt(item.size / 1024);\n    filesize = size + \" KB\";\n    if( size > 1024 ) {\n        size = size / 1024;\n        filesize = size.toFixed(2) + \" MB\";\n    }\n    if( size > 1024 ) {\n        size = size / 1024;\n        filesize = sizesize.toFixed(2) + \" GB\";\n    }\n    \n    retentionMessage = \"Never\";\n    if( item.retention > 0 ) {\n        var age = parseInt((new Date().getTime() - item.timestamp) / (1000*3600*24));\n        retentionMessage = (item.retention - age) + \" days\";\n    }\n    \n    f = new Date(item.first);\n    l = new Date(item.last);    \n    a = new Date(item.timestamp);    \n    recording = {\n        href: '<a href=\"' + item.url + '\">' + item.filename + '.avi</a>',\n        filename: item.filename,\n        resolution: item.resolution,\n        size: filesize,\n        retention: retentionMessage,\n        frames: item.frames,\n        firstDate: f.getFullYear() + \"-\" + (\"00\"+(f.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+f.getDate()).substr(-2,2),\n        lastDate: l.getFullYear() + \"-\" + (\"00\"+(l.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+l.getDate()).substr(-2,2)\n    }\n    list.push(recording);\n});\nmsg.payload = list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            [
                "25f7f45261c4e605",
                "1ae23501fee368bc"
            ]
        ]
    },
    {
        "id": "918194837a26ec8b",
        "type": "ui_table",
        "z": "cff0ca7eba0f8f68",
        "group": "6d0232f0fd507b32",
        "name": "",
        "order": 3,
        "width": "17",
        "height": "11",
        "columns": [
            {
                "field": "href",
                "title": "Recording",
                "width": "26%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "size",
                "title": "Size",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "frames",
                "title": "Frames",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "resolution",
                "title": "Resolution",
                "width": "12%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "retention",
                "title": "Removed",
                "width": "12%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "firstDate",
                "title": "First frame",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastDate",
                "title": "Last frame",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 890,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2852aa493536aa68",
        "type": "sort",
        "z": "596071a8177474d8",
        "name": "",
        "order": "ascending",
        "as_num": false,
        "target": "payload",
        "targetType": "msg",
        "msgKey": "name",
        "msgKeyType": "jsonata",
        "seqKey": "payload",
        "seqKeyType": "msg",
        "x": 910,
        "y": 100,
        "wires": [
            [
                "f3785d4fcc6e8cf3",
                "f705520ea34a81ab"
            ]
        ]
    },
    {
        "id": "25f7f45261c4e605",
        "type": "sort",
        "z": "cff0ca7eba0f8f68",
        "name": "",
        "order": "ascending",
        "as_num": false,
        "target": "payload",
        "targetType": "msg",
        "msgKey": "filename",
        "msgKeyType": "jsonata",
        "seqKey": "payload",
        "seqKeyType": "msg",
        "x": 750,
        "y": 160,
        "wires": [
            [
                "918194837a26ec8b"
            ]
        ]
    },
    {
        "id": "3059bf3837f268a2",
        "type": "function",
        "z": "9ce50e8fbc15bf60",
        "name": "Index file path",
        "func": "msg.filename = msg.timelapse.filepath + \"avi.index\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "9c99a3d985faa8ad"
            ]
        ]
    },
    {
        "id": "9c99a3d985faa8ad",
        "type": "file in",
        "z": "9ce50e8fbc15bf60",
        "name": "Read Index File",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "6157ca9e09671c02"
            ]
        ]
    },
    {
        "id": "7214953a8b723459",
        "type": "catch",
        "z": "9ce50e8fbc15bf60",
        "name": "",
        "scope": [
            "9c99a3d985faa8ad",
            "a2f35c16424ea052"
        ],
        "uncaught": false,
        "x": 1250,
        "y": 140,
        "wires": [
            [
                "5d35533857628768"
            ]
        ]
    },
    {
        "id": "5d35533857628768",
        "type": "change",
        "z": "9ce50e8fbc15bf60",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Corrupt file",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "430655105d42dd4c",
        "type": "function",
        "z": "9ce50e8fbc15bf60",
        "name": "Timestamp file path",
        "func": "msg.filename = msg.timelapse.filepath + \"avi.timestamp\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 80,
        "wires": [
            [
                "a2f35c16424ea052"
            ]
        ]
    },
    {
        "id": "a2f35c16424ea052",
        "type": "file in",
        "z": "9ce50e8fbc15bf60",
        "name": "Read Timestamp File",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1020,
        "y": 80,
        "wires": [
            [
                "9c26df35dc3a2ca6"
            ]
        ]
    },
    {
        "id": "6157ca9e09671c02",
        "type": "function",
        "z": "9ce50e8fbc15bf60",
        "name": "msg.position",
        "func": "index = msg.payload.split(\"\\n\");\nmsg.position = 240;\nmsg.size = parseInt(index[msg.frameIndex-1]);\nfor( var i = 1; i < msg.frameIndex; i++)\n    msg.position += parseInt(index[i-1]);\nmsg.position += msg.frameIndex * 8;\nmsg.payload = msg.position;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "430655105d42dd4c"
            ]
        ]
    },
    {
        "id": "9c26df35dc3a2ca6",
        "type": "function",
        "z": "9ce50e8fbc15bf60",
        "name": "msg.timestamp",
        "func": "index = msg.payload.split(\"\\n\");\nmsg.timestamp = parseInt(index[msg.frameIndex-1]);\nmsg.payload = msg.timestamp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 80,
        "wires": [
            [
                "173e24ca4eee3dbe"
            ]
        ]
    },
    {
        "id": "173e24ca4eee3dbe",
        "type": "function",
        "z": "9ce50e8fbc15bf60",
        "name": "Extract JPEG",
        "func": "var filepath = msg.timelapse.filepath + msg.timelapse.filename;\n\nfs.open(filepath,'r+',function(error,fd) {\n    if(error) {\n        msg.payload = {\n            message: \"File open failed\",\n            error: error\n        }\n        node.send([null,msg]);\n        return;\n    }\n    var data = new Buffer.alloc(msg.size);\n    fs.read(fd,data,0,msg.size,msg.position,function(error,bytes){\n        if(error) {\n            msg.payload = {\n                message: \"File read header failed\",\n                error: error\n            }\n            node.send([null,msg]);\n            fs.close(fd,function(error){});\n            return;\n        }\n        if( bytes < msg.size ) {\n            msg.payload = {\n                message: \"Corrupt data\",\n                error: error\n            }\n            node.send([null,msg]);\n            fs.close(fd,function(error){});\n            return;\n        }\n        fs.close(fd,function(error){});\n        msg.payload = {\n            position: msg.position,\n            index: msg.frameIndex,\n            size: msg.size,\n            timestamp: msg.timestamp,\n            jpeg: data.toString('base64')\n        }\n        node.send([msg,null]);\n    })\n});\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 1430,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "add861c3b97f0b64",
        "type": "link in",
        "z": "cff0ca7eba0f8f68",
        "name": "Refresh recording table",
        "links": [
            "06212515f4be3a68",
            "bf7e99355fe516c6",
            "ed614f86465ed9a2",
            "112c53fed885877c",
            "88d4831663baaa1c",
            "bfd3a7179620ad03"
        ],
        "x": 235,
        "y": 160,
        "wires": [
            [
                "70b5fdc2b804ddcd"
            ]
        ]
    },
    {
        "id": "ff3b6af679d085ea",
        "type": "comment",
        "z": "cff0ca7eba0f8f68",
        "name": "Refresh",
        "info": "",
        "x": 170,
        "y": 160,
        "wires": []
    },
    {
        "id": "783b8474af113dbb",
        "type": "link in",
        "z": "5a714ef6fcfb4261",
        "name": "Reset",
        "links": [
            "43646cba746e093a"
        ],
        "x": 155,
        "y": 120,
        "wires": [
            [
                "390f9a94bc1c00e5"
            ]
        ]
    },
    {
        "id": "0ace59f3f3f278bb",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.name",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 120,
        "wires": [
            [
                "d53d4895f1da62b8"
            ]
        ]
    },
    {
        "id": "bfa8e080ef318aaf",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.fps",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4008983b1b6bbaca",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.resolution",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3500f44f8e257307",
        "type": "function",
        "z": "5a714ef6fcfb4261",
        "name": "Visability",
        "func": "msg.enabled = false;\ntimelapse = flow.get(\"timelapse\");\n\nif(!timelapse)\n    return msg;\nif(!timelapse.hasOwnProperty(\"name\"))\n    return msg;\nif( timelapse.name.length < 2 )\n    return msg;\nmsg.enabled = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 400,
        "wires": [
            [
                "89bb2b11ac0b9252"
            ]
        ]
    },
    {
        "id": "d53d4895f1da62b8",
        "type": "link out",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "links": [
            "f0d2baf7caa6b1c8"
        ],
        "x": 1055,
        "y": 120,
        "wires": []
    },
    {
        "id": "a11235a28d7d9bad",
        "type": "ui_text_input",
        "z": "5a714ef6fcfb4261",
        "name": "Name",
        "label": "Name",
        "tooltip": "",
        "group": "03807f88fd5be3bd",
        "order": 6,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "topicType": "str",
        "x": 650,
        "y": 120,
        "wires": [
            [
                "0ace59f3f3f278bb"
            ]
        ]
    },
    {
        "id": "fc8bcaf39da79794",
        "type": "ui_numeric",
        "z": "5a714ef6fcfb4261",
        "name": "FPS",
        "label": "FPS",
        "tooltip": "",
        "group": "03807f88fd5be3bd",
        "order": 7,
        "width": "0",
        "height": "0",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "str",
        "format": "{{value}}",
        "min": "3",
        "max": "60",
        "step": 1,
        "x": 650,
        "y": 160,
        "wires": [
            [
                "bfa8e080ef318aaf"
            ]
        ]
    },
    {
        "id": "cb414cab9a336f25",
        "type": "ui_dropdown",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "label": "Resolution",
        "tooltip": "",
        "place": "Select option",
        "group": "03807f88fd5be3bd",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "1920x1080 (16:9)",
                "value": "1920x1080",
                "type": "str"
            },
            {
                "label": "1280x720 (16:9)",
                "value": "1280x720",
                "type": "str"
            },
            {
                "label": "800x450  (16:9)",
                "value": "800x450",
                "type": "str"
            },
            {
                "label": "640x360 (16:9)",
                "value": "640x360",
                "type": "str"
            },
            {
                "label": "480x270 (16:9)",
                "value": "480x270",
                "type": "str"
            },
            {
                "label": "320x180 (16:9)",
                "value": "320x180",
                "type": "str"
            },
            {
                "label": "160x90 (16:9)",
                "value": "160x90",
                "type": "str"
            },
            {
                "label": "1920x1920 (1:1)",
                "value": "1920x1920",
                "type": "str"
            },
            {
                "label": "720x720 (1:1)",
                "value": "720x720",
                "type": "str"
            },
            {
                "label": "640x640 (1:1)",
                "value": "640x640",
                "type": "str"
            },
            {
                "label": "480x480 (1:1)",
                "value": "480x480",
                "type": "str"
            },
            {
                "label": "320x320 (1:1)",
                "value": "320x320",
                "type": "str"
            },
            {
                "label": "240x240 (1:1)",
                "value": "240x240",
                "type": "str"
            },
            {
                "label": "160x160 (1:1)",
                "value": "160x160",
                "type": "str"
            },
            {
                "label": "1280x960 (4:3)",
                "value": "1280x960",
                "type": "str"
            },
            {
                "label": "800x600 (4:3)",
                "value": "800x600",
                "type": "str"
            },
            {
                "label": "640x480 (4:3)",
                "value": "640x480",
                "type": "str"
            },
            {
                "label": "480x360 (4:3)",
                "value": "480x360",
                "type": "str"
            },
            {
                "label": "320x240 (4:3)",
                "value": "320x240",
                "type": "str"
            },
            {
                "label": "240x180 (4:3)",
                "value": "240x180",
                "type": "str"
            },
            {
                "label": "1440x1080 (4:3)",
                "value": "1440x1080",
                "type": "str"
            },
            {
                "label": "160x120 (4:3)",
                "value": "160x120",
                "type": "str"
            },
            {
                "label": "1440x900 (16:10)",
                "value": "1440x900",
                "type": "str"
            },
            {
                "label": "1280x800 (16:10)",
                "value": "1280x800",
                "type": "str"
            },
            {
                "label": "1024x640 (16:10)",
                "value": "1024x640",
                "type": "str"
            },
            {
                "label": "800x500 (16:10)",
                "value": "800x500",
                "type": "str"
            },
            {
                "label": "640x400 (16:10)",
                "value": "640x400",
                "type": "str"
            },
            {
                "label": "480x300 (16:10)",
                "value": "480x300",
                "type": "str"
            },
            {
                "label": "320x200 (16:10)",
                "value": "320x200",
                "type": "str"
            },
            {
                "label": "160x100 (16:10)",
                "value": "160x100 ",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "str",
        "x": 670,
        "y": 200,
        "wires": [
            [
                "4008983b1b6bbaca"
            ]
        ]
    },
    {
        "id": "89bb2b11ac0b9252",
        "type": "ui_button",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "group": "03807f88fd5be3bd",
        "order": 12,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Create",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Create",
        "topicType": "str",
        "x": 390,
        "y": 400,
        "wires": [
            [
                "696fcd45b159547a"
            ]
        ]
    },
    {
        "id": "edf20db7d7c04725",
        "type": "ui_dropdown",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "label": "Auto-save",
        "tooltip": "Auto-save timelapse",
        "place": "Auto-save",
        "group": "03807f88fd5be3bd",
        "order": 10,
        "width": "0",
        "height": "0",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "No auto-save",
                "value": "Never",
                "type": "str"
            },
            {
                "label": "Every day",
                "value": "Every day",
                "type": "str"
            },
            {
                "label": "Every week",
                "value": "Every week",
                "type": "str"
            },
            {
                "label": "Every month",
                "value": "Every month",
                "type": "str"
            },
            {
                "label": "When size > 25 MB",
                "value": "Size > 25 MB",
                "type": "str"
            },
            {
                "label": "When size > 50 MB",
                "value": "Size > 50 MB",
                "type": "str"
            },
            {
                "label": "When size > 100 MB",
                "value": "Size > 100 MB",
                "type": "str"
            },
            {
                "label": "When size > 200 MB",
                "value": "Size > 200 MB",
                "type": "str"
            },
            {
                "label": "When size > 500 MB",
                "value": "Size > 500 MB",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "str",
        "x": 670,
        "y": 240,
        "wires": [
            [
                "59bcd97a9c6b32a8"
            ]
        ]
    },
    {
        "id": "59bcd97a9c6b32a8",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.archive",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c5457d252c2a9a18",
        "type": "ui_numeric",
        "z": "5a714ef6fcfb4261",
        "name": "Retention",
        "label": "Retention",
        "tooltip": "",
        "group": "03807f88fd5be3bd",
        "order": 11,
        "width": "0",
        "height": "0",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "str",
        "format": "{{value}} days",
        "min": "0",
        "max": "365",
        "step": "5",
        "x": 660,
        "y": 280,
        "wires": [
            [
                "89812ce9726986f5"
            ]
        ]
    },
    {
        "id": "89812ce9726986f5",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.retention",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "2b46f31cce4a7c70",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 120,
        "wires": [
            [
                "a11235a28d7d9bad"
            ]
        ]
    },
    {
        "id": "cfc07715552e6048",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.fps",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 160,
        "wires": [
            [
                "fc8bcaf39da79794"
            ]
        ]
    },
    {
        "id": "a440c8ed27645a75",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.resolution",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 200,
        "wires": [
            [
                "cb414cab9a336f25"
            ]
        ]
    },
    {
        "id": "e895e5c39c50f2e7",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.archive",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 240,
        "wires": [
            [
                "edf20db7d7c04725"
            ]
        ]
    },
    {
        "id": "22f0fedc5e668153",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.retention",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 280,
        "wires": [
            [
                "c5457d252c2a9a18"
            ]
        ]
    },
    {
        "id": "f0d2baf7caa6b1c8",
        "type": "link in",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "links": [
            "d53d4895f1da62b8"
        ],
        "x": 135,
        "y": 400,
        "wires": [
            [
                "3500f44f8e257307"
            ]
        ]
    },
    {
        "id": "390f9a94bc1c00e5",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"name\":\"\",\"fps\":10,\"resolution\":\"640x360\",\"width\":640,\"height\":360,\"archive\":\"Size > 50 MB\",\"retention\":10}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "timelapse",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 120,
        "wires": [
            [
                "2b46f31cce4a7c70",
                "cfc07715552e6048",
                "a440c8ed27645a75",
                "e895e5c39c50f2e7",
                "22f0fedc5e668153",
                "ae2d6dd76dd5c304"
            ]
        ]
    },
    {
        "id": "43646cba746e093a",
        "type": "link out",
        "z": "5a714ef6fcfb4261",
        "name": "New timelapse",
        "links": [
            "47142e0d89ef9c11",
            "783b8474af113dbb"
        ],
        "x": 955,
        "y": 440,
        "wires": []
    },
    {
        "id": "3c8daa0b2c6a8dfd",
        "type": "ui_toast",
        "z": "5a714ef6fcfb4261",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1170,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e6b05bbfeeefa5a1",
        "type": "function",
        "z": "5a714ef6fcfb4261",
        "name": "message",
        "func": "msg.topic = \"Timelapse \" + msg.payload.name + \" created\";\nmsg.payload = 'Post image as Base64 to /add/'+msg.payload.id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 400,
        "wires": [
            [
                "3c8daa0b2c6a8dfd"
            ]
        ]
    },
    {
        "id": "fef6848507907d83",
        "type": "http in",
        "z": "2d9ef7a6281fe338",
        "name": "",
        "url": "/add/:id",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "633417e77311af8e"
            ]
        ]
    },
    {
        "id": "1e87c15ffc0764b5",
        "type": "function",
        "z": "2d9ef7a6281fe338",
        "name": "Validate request",
        "func": "var timelapse = global.get(\"timelapse\") || {};\n\nvar exists = null;\nfor(var id in timelapse ) {\n    if( msg.timelapseID === id )\n        exists = timelapse[id];\n}\n\nif( !exists ) {\n    msg.payload = {\n        message: \"Timelapse \" + msg.timelapseID + \" does not exists\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nmsg.payload = exists;\n\nnode.send([msg,null]);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 120,
        "wires": [
            [
                "9e6f8e75c808c679"
            ],
            [
                "93a1173344faabab"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "3a2994b2d54d1fb1",
        "type": "function",
        "z": "2d9ef7a6281fe338",
        "name": "Response",
        "func": "msg.payload = {\n    id:msg.timelapse.id,\n    name:msg.timelapse.name,\n    size:msg.timelapse.size,\n    frames:msg.timelapse.frames\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 120,
        "wires": [
            [
                "7613b0fa08be9e20",
                "193d25d7e50daa53"
            ]
        ]
    },
    {
        "id": "7613b0fa08be9e20",
        "type": "http response",
        "z": "2d9ef7a6281fe338",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2170,
        "y": 120,
        "wires": []
    },
    {
        "id": "dcdc00f2714485ee",
        "type": "change",
        "z": "2d9ef7a6281fe338",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapseID",
                "pt": "msg",
                "to": "req.params.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "imagebuffer",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 120,
        "wires": [
            [
                "1e87c15ffc0764b5"
            ]
        ]
    },
    {
        "id": "93a1173344faabab",
        "type": "http response",
        "z": "2d9ef7a6281fe338",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1340,
        "y": 280,
        "wires": []
    },
    {
        "id": "9e6f8e75c808c679",
        "type": "function",
        "z": "2d9ef7a6281fe338",
        "name": "Add image to AVI",
        "func": "/*\nInput \n\nmsg.imagebuffer = buffer containing JPEG data\nmsg.payload = Timelapse object\n*/\n\nmsg.timelapse = JSON.parse(JSON.stringify(msg.payload));\nmsg.payload = msg.imagebuffer;\n\nfunction fromLILEND( buf, dword ) {\n    var pos = dword * 4;\n     return (buf[pos+3] << 24) + (buf[pos+2] << 16) + (buf[pos+1] << 8) + buf[pos];\n}\n\nfunction toLILEND( value, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = (value & 0xff);\n    buf[pos + 1] = ( (value >> 8 ) & 0xff);\n    buf[pos + 2] = ( (value >> 16 ) & 0xff);\n    buf[pos + 3] = ( (value >> 24 ) & 0xff);\n}\n\nvar filepath = '/recordings/'+msg.timelapse.id+'/'+msg.timelapse.filename + '.avi';\nvar padding = (4-(msg.payload.length%4)) % 4;\nvar jpegSize = msg.payload.length + padding;\n//node.warn(\"filepath=\"+filepath);\n//node.warn(\"padding=\"+padding);\n//node.warn(\"jpegSize=\"+jpegSize);\n\n\n//Adjust jpeg header\navi1String = \"AVI1\";\nmsg.payload[6] = avi1String.charCodeAt(0);\nmsg.payload[7] = avi1String.charCodeAt(1);\nmsg.payload[8] = avi1String.charCodeAt(2);\nmsg.payload[9] = avi1String.charCodeAt(3);\n\nfs.stat( filepath, function( error, stats) {\n    if(error) {\n        msg.payload = {\n            message: \"File does not exist\",\n            error: error\n        }\n        node.send([null,msg]);\n        return;\n    }\n//    node.warn(\"filesize=\"+stats.size);\n    fs.open(filepath,'r+',function(error,fd) {\n        if(error) {\n            msg.payload = {\n                message: \"File open failed\",\n                error: error\n            }\n            node.send([null,msg]);\n            return;\n        }\n        var header = new Buffer.alloc(240);\n        fs.read(fd,header,0,240,0,function(error,bytes){\n            if(error) {\n                msg.payload = {\n                    message: \"File read header failed\",\n                    error: error\n                }\n                node.send([null,msg]);\n                fs.close(fd,function(error){});\n                return;\n            }\n            if( bytes < 240 ) {\n                msg.payload = {\n                    message: \"File has corrupt header\",\n                    error: error\n                }\n                node.send([null,msg]);\n                fs.close(fd,function(error){});\n                return;\n            }\n    \n            msg.timelapse.size = fromLILEND(header,1);\n            msg.timelapse.frames = fromLILEND(header,12);\n\n            entry = Buffer.alloc(8);\n            var entryString = \"00db\";\n            entry[0] = entryString.charCodeAt(0);\n            entry[1] = entryString.charCodeAt(1);\n            entry[2] = entryString.charCodeAt(2);\n            entry[3] = entryString.charCodeAt(3);\n            toLILEND( jpegSize, entry, 1);\n            fs.write(fd,entry,0,8,stats.size,function(error,bytes) {\n                if(error) {\n                    msg.payload = {\n                        message: \"File write failed (entry)\",\n                        error: error\n                    }\n                    node.send([null,msg]);\n                    fs.close(fd,function(error){});\n                    return;\n                }\n//                fs.close(fd,function(error){});\n//                return;\n                fs.write(fd,msg.payload,0,msg.payload.length,stats.size+8,function(error,bytes) {\n                    if(error) {\n                        msg.payload = {\n                            message: \"File write failed (image)\",\n                            error: error\n                        }\n                        node.send([null,msg]);\n                        fs.close(fd,function(error){});\n                        return;\n                    }\n                    var paddingBuffer = Buffer.alloc(padding);\n                    fs.write(fd,paddingBuffer,0,padding,stats.size+8+msg.payload.length,function(error,bytes) {\n                        if(error) {\n                            msg.payload = {\n                                message: \"File write failed (padding)\",\n                                error: error\n                            }\n                            node.send([null,msg]);\n                            fs.close(fd,function(error){});\n                            return;\n                        }\n\n                        msg.timelapse.size += jpegSize + 8;\n                        msg.timelapse.frames++;\n                        msg.timelapse.last = new Date().getTime();\n                        if( !msg.timelapse.first )\n                            msg.timelapse.first = msg.timelapse.last;\n                        msg.timelapse.imageSize = jpegSize;\n\n                        toLILEND( msg.timelapse.size,header,1);\n                        toLILEND(msg.timelapse.frames,header,12);\n                        toLILEND( msg.timelapse.frames, header, 35 ); //strh_length\n                        toLILEND( parseInt(msg.timelapse.size/msg.timelapse.fps), header, 36 ); //strh_sugg_buff_sz\n                        toLILEND( msg.timelapse.frames, header, 56 ); //odml_frames\n                        toLILEND( msg.timelapse.size - 236, header, 58 );\n                        fs.write(fd,header,0,240,0,function(error,bytes) {\n                            if(error) {\n                                msg.payload = {\n                                    message: \"File write failed (header)\",\n                                    error: error\n                                }\n                                node.send([null,msg]);\n                                fs.close(fd,function(error){});\n                                return;\n                            }\n                            msg.payload = msg.timelapse;\n                            node.send([msg,null]);\n                            fs.close(fd,function(error){});\n                        });\n                    });\n                });\n            });\n        });\n    })\n});\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 1010,
        "y": 120,
        "wires": [
            [
                "41073221e76512d6",
                "4cc1c55a9cdf584c",
                "929ed4f8b183ea2d"
            ],
            [
                "93a1173344faabab"
            ]
        ]
    },
    {
        "id": "41073221e76512d6",
        "type": "function",
        "z": "2d9ef7a6281fe338",
        "name": "avi.index",
        "func": "msg.filename = '/recordings/'+msg.timelapse.id+'/'+ 'avi.index';\nmsg.payload = msg.timelapse.imageSize;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 160,
        "wires": [
            [
                "d0736433b2a46470"
            ]
        ]
    },
    {
        "id": "d0736433b2a46470",
        "type": "file",
        "z": "2d9ef7a6281fe338",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1550,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4cc1c55a9cdf584c",
        "type": "function",
        "z": "2d9ef7a6281fe338",
        "name": "avi.timestamp",
        "func": "msg.filename = '/recordings/'+msg.timelapse.id+'/'+ 'avi.timestamp';\nmsg.payload = new Date().getTime();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 200,
        "wires": [
            [
                "d0736433b2a46470"
            ]
        ]
    },
    {
        "id": "929ed4f8b183ea2d",
        "type": "function",
        "z": "2d9ef7a6281fe338",
        "name": "avi.json",
        "func": "msg.filename = '/recordings/'+msg.timelapse.id+'/'+ 'avi.json';\nmsg.payload = JSON.stringify(msg.timelapse,null,'\\t');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 120,
        "wires": [
            [
                "ef24ef1c2853efe9"
            ]
        ]
    },
    {
        "id": "ef24ef1c2853efe9",
        "type": "file",
        "z": "2d9ef7a6281fe338",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1550,
        "y": 120,
        "wires": [
            [
                "a85a3b7c306ce085"
            ]
        ]
    },
    {
        "id": "a85a3b7c306ce085",
        "type": "function",
        "z": "2d9ef7a6281fe338",
        "name": "global.timelapse",
        "func": "var timelapse = global.get(\"timelapse\");\ntimelapse[msg.timelapse.id] = msg.timelapse;\nglobal.set(\"timelapse\",timelapse);\nmsg.payload = msg.timelapse;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 120,
        "wires": [
            [
                "3a2994b2d54d1fb1",
                "1cf35985c97fa874"
            ]
        ]
    },
    {
        "id": "193d25d7e50daa53",
        "type": "link out",
        "z": "2d9ef7a6281fe338",
        "name": "Image Added",
        "links": [
            "47142e0d89ef9c11"
        ],
        "x": 2135,
        "y": 160,
        "wires": []
    },
    {
        "id": "b89ca6f993cfe3da",
        "type": "ui_button",
        "z": "db85d9978b91dbd7",
        "name": "",
        "group": "954043ed7a4ec686",
        "order": 10,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "orange",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Flush",
        "topicType": "str",
        "x": 410,
        "y": 200,
        "wires": [
            [
                "6139342fb0a0d8e8"
            ]
        ]
    },
    {
        "id": "0b12983e88bacdd9",
        "type": "ui_button",
        "z": "db85d9978b91dbd7",
        "name": "",
        "group": "954043ed7a4ec686",
        "order": 9,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Save recording",
        "tooltip": "",
        "color": "",
        "bgcolor": "blue",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Archive",
        "topicType": "str",
        "x": 440,
        "y": 260,
        "wires": [
            [
                "80158a175fcf512d"
            ]
        ]
    },
    {
        "id": "a247da1adf468e1a",
        "type": "change",
        "z": "596071a8177474d8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 100,
        "wires": [
            [
                "d130a0bc6221c94f"
            ]
        ]
    },
    {
        "id": "633417e77311af8e",
        "type": "base64",
        "z": "2d9ef7a6281fe338",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 320,
        "y": 120,
        "wires": [
            [
                "dcdc00f2714485ee"
            ]
        ]
    },
    {
        "id": "d88de9eda95a1440",
        "type": "ui_ui_control",
        "z": "db85d9978b91dbd7",
        "name": "",
        "events": "all",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "e6d3ca4f64f36963"
            ]
        ]
    },
    {
        "id": "e6d3ca4f64f36963",
        "type": "switch",
        "z": "db85d9978b91dbd7",
        "name": "TAB: Modify",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Modify",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 80,
        "wires": [
            [
                "daf8717e683a3087"
            ]
        ]
    },
    {
        "id": "0b082eb302a8deea",
        "type": "function",
        "z": "db85d9978b91dbd7",
        "name": "Options",
        "func": "msg.options = [];\nvar timelapse = global.get(\"timelapse\") || {};\n\nfor(var id in timelapse ) {\n    var option = {};\n    option[timelapse[id].name] = timelapse[id];\n    msg.options.push(option);\n}\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 80,
        "wires": [
            [
                "b5373b5770546492"
            ]
        ]
    },
    {
        "id": "b5373b5770546492",
        "type": "ui_dropdown",
        "z": "db85d9978b91dbd7",
        "name": "",
        "label": "Timelapse",
        "tooltip": "",
        "place": "Select...",
        "group": "954043ed7a4ec686",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 950,
        "y": 80,
        "wires": [
            [
                "aea3356146b1ec49"
            ]
        ]
    },
    {
        "id": "aea3356146b1ec49",
        "type": "change",
        "z": "db85d9978b91dbd7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 80,
        "wires": [
            [
                "543c53d77bf6cd37"
            ]
        ]
    },
    {
        "id": "daf8717e683a3087",
        "type": "change",
        "z": "db85d9978b91dbd7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse",
                "pt": "flow",
                "to": "null",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "0b082eb302a8deea",
                "0505baaaad66c6cd"
            ]
        ]
    },
    {
        "id": "34cd6f80c450c4a0",
        "type": "link in",
        "z": "db85d9978b91dbd7",
        "name": "",
        "links": [
            "0505baaaad66c6cd",
            "543c53d77bf6cd37"
        ],
        "x": 145,
        "y": 200,
        "wires": [
            [
                "884be61150a48976"
            ]
        ]
    },
    {
        "id": "884be61150a48976",
        "type": "function",
        "z": "db85d9978b91dbd7",
        "name": "Enabled",
        "func": "msg.enabled = flow.get(\"timelapse\") !== null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 200,
        "wires": [
            [
                "b89ca6f993cfe3da"
            ]
        ]
    },
    {
        "id": "0505baaaad66c6cd",
        "type": "link out",
        "z": "db85d9978b91dbd7",
        "name": "",
        "links": [
            "34cd6f80c450c4a0",
            "74f3160fd288891b",
            "45c98295b82711d4"
        ],
        "x": 755,
        "y": 120,
        "wires": []
    },
    {
        "id": "543c53d77bf6cd37",
        "type": "link out",
        "z": "db85d9978b91dbd7",
        "name": "",
        "links": [
            "34cd6f80c450c4a0",
            "74f3160fd288891b",
            "45c98295b82711d4"
        ],
        "x": 1315,
        "y": 80,
        "wires": []
    },
    {
        "id": "74f3160fd288891b",
        "type": "link in",
        "z": "db85d9978b91dbd7",
        "name": "",
        "links": [
            "0505baaaad66c6cd",
            "543c53d77bf6cd37"
        ],
        "x": 145,
        "y": 260,
        "wires": [
            [
                "da4163a965d2b898"
            ]
        ]
    },
    {
        "id": "da4163a965d2b898",
        "type": "function",
        "z": "db85d9978b91dbd7",
        "name": "Enabled",
        "func": "msg.enabled = flow.get(\"timelapse\") !== null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 260,
        "wires": [
            [
                "0b12983e88bacdd9"
            ]
        ]
    },
    {
        "id": "e22cb44159b7ee9e",
        "type": "ui_button",
        "z": "db85d9978b91dbd7",
        "name": "",
        "group": "954043ed7a4ec686",
        "order": 9,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Archive",
        "topicType": "str",
        "x": 410,
        "y": 340,
        "wires": [
            [
                "dc59904ad2d7ffb9"
            ]
        ]
    },
    {
        "id": "45c98295b82711d4",
        "type": "link in",
        "z": "db85d9978b91dbd7",
        "name": "",
        "links": [
            "0505baaaad66c6cd",
            "543c53d77bf6cd37"
        ],
        "x": 145,
        "y": 340,
        "wires": [
            [
                "f9edfeda470d309d"
            ]
        ]
    },
    {
        "id": "f9edfeda470d309d",
        "type": "function",
        "z": "db85d9978b91dbd7",
        "name": "Enabled",
        "func": "msg.enabled = flow.get(\"timelapse\") !== null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "e22cb44159b7ee9e"
            ]
        ]
    },
    {
        "id": "80158a175fcf512d",
        "type": "change",
        "z": "db85d9978b91dbd7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 260,
        "wires": [
            [
                "8089c870526cae5b"
            ]
        ]
    },
    {
        "id": "bb09ef963155db50",
        "type": "ui_ui_control",
        "z": "596071a8177474d8",
        "name": "",
        "events": "all",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "8ff86e557052feda"
            ]
        ]
    },
    {
        "id": "8ff86e557052feda",
        "type": "switch",
        "z": "596071a8177474d8",
        "name": "TAB: Timelapse",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Timelapse",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 100,
        "wires": [
            [
                "a247da1adf468e1a"
            ]
        ]
    },
    {
        "id": "696fcd45b159547a",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 400,
        "wires": [
            [
                "cbd0ca1dfe19d32a"
            ]
        ]
    },
    {
        "id": "cbd0ca1dfe19d32a",
        "type": "subflow:e5130f511bd00d68",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "env": [],
        "x": 790,
        "y": 400,
        "wires": [
            [
                "43646cba746e093a",
                "e6b05bbfeeefa5a1"
            ]
        ]
    },
    {
        "id": "aaa5043be154192e",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "global.timelapse",
        "func": "timelapse = global.get(\"timelapse\") || {};\ntimelapse[msg.timelapse.id] = msg.timelapse;\nglobal.set(\"timelapse\", timelapse);\nmsg.payload = msg.timelapse;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 100,
        "wires": [
            [
                "8619897bcf1cac4b"
            ]
        ]
    },
    {
        "id": "8619897bcf1cac4b",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "Generate AVI header",
        "func": "function toLILEND( value, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = (value & 0xff);\n    buf[pos + 1] = ( (value >> 8 ) & 0xff);\n    buf[pos + 2] = ( (value >> 16 ) & 0xff);\n    buf[pos + 3] = ( (value >> 24 ) & 0xff);\n}\n\nfunction toFOURCC(text, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = text.charCodeAt(0);\n    buf[pos + 1] = text.charCodeAt(1);\n    buf[pos + 2] = text.charCodeAt(2);\n    buf[pos + 3] = text.charCodeAt(3);\n}\n\naviHeader = Buffer.alloc(240);\ntoFOURCC(\"RIFF\",aviHeader,0); //LIST_RIFF\ntoLILEND(240,aviHeader,1); //RIFF_size\ntoFOURCC(\"AVI \",aviHeader,2); //RIFF_toFOURCC\ntoFOURCC(\"LIST\",aviHeader,3); //LIST_HDRL\ntoLILEND(208,aviHeader,4); //hdrl_size\ntoFOURCC(\"hdrl\",aviHeader,5); //hdrl_name\ntoFOURCC(\"avih\",aviHeader,6); //avih\ntoLILEND(56,aviHeader,7); //avih_size\ntoLILEND(parseInt(1000000/msg.payload.fps),aviHeader,8); //AVIH_MicroSecPerFrame\ntoLILEND(6400,aviHeader,9); //AVIH_MaxBytesPerSec\ntoLILEND(0,aviHeader,10); //AVIH_PaddingGranularity\ntoLILEND(0x10,aviHeader,11); //AVIH_Flags = Has Index\n//toLILEND(0x0,aviHeader,11); //AVIH_Flags = Has Index\ntoLILEND(0,aviHeader,12); //AVIH_TotalFrames = 0\ntoLILEND(0,aviHeader,13); //AVIH_InitialFrames = 0\ntoLILEND(1,aviHeader,14); //AVIH_Streams = 1\ntoLILEND(0,aviHeader,15); //AVIH_SugestedBufferSize = 1\ntoLILEND(msg.payload.width,aviHeader,16); //AVIH_Width\ntoLILEND(msg.payload.height,aviHeader,17); //AVIH_Height\ntoLILEND(0,aviHeader,18); //AVIH_Reserved1\ntoLILEND(0,aviHeader,19); //AVIH_Reserved2\ntoLILEND(0,aviHeader,20); //AVIH_Reserved3\ntoLILEND(0,aviHeader,21); //AVIH_Reserved4\ntoFOURCC(\"LIST\",aviHeader,22); //LIST_strl\ntoLILEND(132,aviHeader,23); //LIST_strl_size\ntoFOURCC(\"strl\",aviHeader,24); //LIST_strl_name\ntoFOURCC(\"strh\",aviHeader,25); //STRH_name\ntoLILEND(48,aviHeader,26); //STRH_size\ntoFOURCC(\"vids\",aviHeader,27); //strh_fccType\ntoFOURCC(\"MJPG\",aviHeader,28); //strh_fccHandler\ntoLILEND(0,aviHeader,29); //strh_flags\ntoLILEND(0,aviHeader,30); //strh_priority\ntoLILEND(0,aviHeader,31); //strh_init_frames\ntoLILEND(1,aviHeader,32); //strh_scale\ntoLILEND(msg.payload.fps,aviHeader,33); //strh_scale\ntoLILEND(0,aviHeader,34); //strh_start\ntoLILEND(0,aviHeader,35); //strh_length (Number of frames)\ntoLILEND(64000,aviHeader,36); //strh_sugg_buff_sz (average size per JPEG)\ntoLILEND(0,aviHeader,37); //strh_quality\ntoLILEND(0,aviHeader,38); //strh_sample_sz\ntoFOURCC(\"strf\",aviHeader,39); //LIST_strf\ntoLILEND(40,aviHeader,40); //strf_size_list\ntoLILEND(40,aviHeader,41); //strf_size\ntoLILEND(msg.payload.width,aviHeader,42); //strf_width\ntoLILEND(msg.payload.height,aviHeader,43); //strf_height\ntoLILEND(1 + 24*256*256,aviHeader,44); //strf_planes_bit_cnt\ntoFOURCC(\"MJPG\",aviHeader,45); //strf_compression\ntoLILEND(msg.payload.width * msg.payload.height * 3,aviHeader,46); //strf_image_size\ntoLILEND(0,aviHeader,47); //strf_xpels_meter\ntoLILEND(0,aviHeader,48); //strf_ypels_meter\ntoLILEND(0,aviHeader,49); //strf_num_colors\ntoLILEND(0,aviHeader,50); //strf_imp_colors\ntoFOURCC(\"LIST\",aviHeader,51); //LIST_ODML\ntoLILEND(16,aviHeader,52); //LIST_ODML_Size\ntoFOURCC(\"odml\",aviHeader,53); //LIST_ODML_type\ntoFOURCC(\"dmlh\",aviHeader,54); //odml_toFOURCC\ntoLILEND(4,aviHeader,55); //odml_size\ntoLILEND(0,aviHeader,56); //odml_frames\ntoFOURCC(\"LIST\",aviHeader,57); //LIST_movi\ntoLILEND(4,aviHeader,58); //LIST_movi_size SUM( JPEG data size) + (8 * frames) + 4\ntoFOURCC(\"movi\",aviHeader,59); //LIST_movi_name\n\nmsg.payload = aviHeader;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "f6dbc91e91b9b265",
                "d1f71050e7a19bda",
                "dc794a84aa924dd8"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "507a8317bd62194c",
        "type": "file",
        "z": "e5130f511bd00d68",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1210,
        "y": 100,
        "wires": [
            [
                "98f888330985eebe"
            ]
        ]
    },
    {
        "id": "f6dbc91e91b9b265",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "file.avi",
        "func": "msg.filename = \"/recordings/\"+msg.timelapse.id+\"/\"+msg.timelapse.filename + \".avi\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 100,
        "wires": [
            [
                "507a8317bd62194c"
            ]
        ]
    },
    {
        "id": "7174fc08b6f9f06d",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "Init",
        "func": "msg.timelapse = {\n    id: msg.payload.id,\n    name: msg.payload.name,\n    fps: parseInt(msg.payload.fps || 10),\n    resolution: msg.payload.resolution,\n    first:null,\n    last:null,\n    frames:0,\n    size:0,\n    width:640,\n    height:360,\n    retention: parseInt(msg.payload.retention || 10),\n    archive: msg.payload.archive\n}    \n\nvar resolution = msg.timelapse.resolution.split(\"x\");\nmsg.timelapse.width = parseInt(resolution[0]);\nmsg.timelapse.height = parseInt(resolution[1]);\nmsg.timelapse.filename = msg.timelapse.name.replace(/\\s/g, '_')\nmsg.timelapse.url = '/'+msg.timelapse.id+'/'+msg.timelapse.filename+'.avi';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "aaa5043be154192e"
            ]
        ]
    },
    {
        "id": "d1f71050e7a19bda",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "avi.index",
        "func": "msg.filename = \"/recordings/\"+msg.timelapse.id+\"/avi.index\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 140,
        "wires": [
            [
                "e65922c2bf03fc6b"
            ]
        ]
    },
    {
        "id": "e65922c2bf03fc6b",
        "type": "file",
        "z": "e5130f511bd00d68",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 1210,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "dc794a84aa924dd8",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "avi.timestamp",
        "func": "msg.filename = \"/recordings/\"+msg.timelapse.id+\"/avi.timestamp\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 180,
        "wires": [
            [
                "b8d0a91e1599256e"
            ]
        ]
    },
    {
        "id": "b8d0a91e1599256e",
        "type": "file",
        "z": "e5130f511bd00d68",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 1210,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "98f888330985eebe",
        "type": "change",
        "z": "e5130f511bd00d68",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ae2d6dd76dd5c304",
        "type": "friendly-id",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "mode": "GENERATE-NANOID",
        "charlen": "15",
        "charset": "UPPERCASE",
        "customs": "",
        "tostatus": false,
        "statusVal": "",
        "statusType": "auto",
        "inputFromVal": "",
        "inputFromType": "auto",
        "outputToVal": "payload",
        "outputToType": "msg",
        "x": 520,
        "y": 320,
        "wires": [
            [
                "ad554121a9c80bae"
            ]
        ]
    },
    {
        "id": "ad554121a9c80bae",
        "type": "change",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.id",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "dffd0069abb1149a",
        "type": "inject",
        "z": "5a714ef6fcfb4261",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 60,
        "wires": [
            [
                "390f9a94bc1c00e5"
            ]
        ]
    },
    {
        "id": "dd58762f61ab536b",
        "type": "subflow:e5130f511bd00d68",
        "z": "db85d9978b91dbd7",
        "name": "",
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "ed614f86465ed9a2"
            ]
        ]
    },
    {
        "id": "8089c870526cae5b",
        "type": "subflow:a560a3dc68a59bb3",
        "z": "db85d9978b91dbd7",
        "name": "",
        "env": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "dd58762f61ab536b"
            ]
        ]
    },
    {
        "id": "56e7f00b4afc6127",
        "type": "exec",
        "z": "a560a3dc68a59bb3",
        "command": "mkdir",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 80,
        "wires": [
            [
                "ea57c7ccbdb00c6b"
            ],
            [],
            []
        ]
    },
    {
        "id": "15295f753c12200b",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Init",
        "func": "msg.timelapse = JSON.parse( JSON.stringify(msg.payload));\nvar d = new Date();\nmsg.dateString = d.getFullYear() + \"-\" + (\"00\"+(d.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+(d.getDate())).substr(-2,2);\nmsg.dir = '/recordings/'+ msg.timelapse.id + '/'+ msg.dateString;\nmsg.payload = msg.dir;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 80,
        "wires": [
            [
                "56e7f00b4afc6127"
            ]
        ]
    },
    {
        "id": "ea57c7ccbdb00c6b",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Move content",
        "func": "var d = new Date();\nmsg.payload = '/recordings/'+ msg.timelapse.id + '/*.* ' + msg.dir;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            [
                "085f5566f2c46c9b"
            ]
        ]
    },
    {
        "id": "085f5566f2c46c9b",
        "type": "exec",
        "z": "a560a3dc68a59bb3",
        "command": "mv",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 750,
        "y": 80,
        "wires": [
            [
                "265b2fc55591ea29"
            ],
            [],
            []
        ]
    },
    {
        "id": "265b2fc55591ea29",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Index file path",
        "func": "msg.filename = msg.dir + \"/avi.index\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "079ea3f3d87498b2"
            ]
        ]
    },
    {
        "id": "079ea3f3d87498b2",
        "type": "file in",
        "z": "a560a3dc68a59bb3",
        "name": "Read Index File",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1260,
        "y": 80,
        "wires": [
            [
                "de1c97910f679a2b"
            ]
        ]
    },
    {
        "id": "de1c97910f679a2b",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "msg.index",
        "func": "index = msg.payload.split(\"\\n\");\nmsg.index = [];\n\nfor(var i = 0; i < index.length; i++ ) {\n    if( index[i].length > 2 )\n        msg.index.push(parseInt(index[i]))\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 80,
        "wires": [
            [
                "962f1663a2353f4f"
            ]
        ]
    },
    {
        "id": "962f1663a2353f4f",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Update Header",
        "func": "\nfunction fromLILEND( buf, dword ) {\n    var pos = dword * 4;\n     return (buf[pos+3] << 24) + (buf[pos+2] << 16) + (buf[pos+1] << 8) + buf[pos];\n}\n\nfunction fromFOURCC( buf, dword) {\n    return buf.toString('utf8', dword*4, (dword*4) + 4);\n}\n\nfunction toLILEND( value, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = (value & 0xff);\n    buf[pos + 1] = ( (value >> 8 ) & 0xff);\n    buf[pos + 2] = ( (value >> 16 ) & 0xff);\n    buf[pos + 3] = ( (value >> 24 ) & 0xff);\n}\n\nfunction toFOURCC(text, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = text.charCodeAt(0);\n    buf[pos + 1] = text.charCodeAt(1);\n    buf[pos + 2] = text.charCodeAt(2);\n    buf[pos + 3] = text.charCodeAt(3);\n}\n\nfs.open(msg.dir + \"/\" + msg.timelapse.filename + \".avi\", 'r+',function(error,fd) {\n    if(error) {\n        msg.payload = {\n            message: \"File open failed\",\n            error: error\n        }\n        node.send([null,msg]);\n        return;\n    }\n    var header = new Buffer.alloc(240);\n    fs.read(fd,header,0,240,0,function(error,bytes){\n        if(error) {\n            msg.payload = {\n                message: \"File read header failed\",\n                error: error\n            }\n            node.send([null,msg]);\n            fs.close(fd,function(error){});\n            return;\n        }\n        if( bytes < 240 ) {\n            msg.payload = {\n                message: \"File has corrupt header\",\n                error: error\n            }\n            node.send([null,msg]);\n            fs.close(fd,function(error){});\n            return;\n        }\n        riffSize = fromLILEND( header,1); //RIFF Size\n        riffSize += msg.index.length * 16;\n        toLILEND( riffSize,header,1);\n        fs.write(fd,header,0,240,0,function(error,bytes) {\n            if(error) {\n                msg.payload = {\n                    message: \"File write failed (header)\",\n                    error: error\n                }\n                node.send([null,msg]);\n                fs.close(fd,function(error){});\n                return;\n            }\n            node.send([msg,null]);\n            fs.close(fd,function(error){});\n        });\n        fs.close(fd,function(error){});\n    });\n    \n});    \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 1040,
        "y": 140,
        "wires": [
            [
                "262a7956feae27a6"
            ],
            []
        ]
    },
    {
        "id": "262a7956feae27a6",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Create index buffer",
        "func": "function toLILEND( value, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = (value & 0xff);\n    buf[pos + 1] = ( (value >> 8 ) & 0xff);\n    buf[pos + 2] = ( (value >> 16 ) & 0xff);\n    buf[pos + 3] = ( (value >> 24 ) & 0xff);\n}\n\nfunction toFOURCC(text, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = text.charCodeAt(0);\n    buf[pos + 1] = text.charCodeAt(1);\n    buf[pos + 2] = text.charCodeAt(2);\n    buf[pos + 3] = text.charCodeAt(3);\n}\n\nvar size = 8 + ( msg.index.length * 16 );\n\nbuffer = Buffer.alloc(8+(msg.index.length*16));\n\n//Initialize index\ntoFOURCC(\"idx1\",buffer,0);\ntoLILEND(msg.index.length*16,buffer,1);\n\nvar offset = 4;\nvar dword = 2;\nfor(var i=0; i<msg.index.length; i++ ) {\n    toFOURCC(\"00db\",buffer,dword++);\n    toLILEND(0x10,buffer,dword++); //Flags\n    toLILEND(offset,buffer,dword++);\n    toLILEND(msg.index[i],buffer,dword++); //JPEG Size\n    offset += msg.index[i] + 8;\n}\n\nnode.warn(\"Index buffer: \" + buffer.length);\n\nmsg.payload = buffer;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 140,
        "wires": [
            [
                "2cfe76081493116d"
            ]
        ]
    },
    {
        "id": "2cfe76081493116d",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Append to AVI",
        "func": "msg.filename = msg.dir + '/' + msg.timelapse.filename + '.avi';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 140,
        "wires": [
            [
                "2a8791df139f2610"
            ]
        ]
    },
    {
        "id": "2a8791df139f2610",
        "type": "file",
        "z": "a560a3dc68a59bb3",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1650,
        "y": 140,
        "wires": [
            [
                "0ee6cf98b0ea2cc4"
            ]
        ]
    },
    {
        "id": "d96bcd4c98464d4a",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "global.recordings",
        "func": "recordings = global.get(\"recordings\") || [];\n\nmsg.payload = {\n    id: msg.timelapse.id,\n    name: msg.timelapse.name,\n    fps: msg.timelapse.fps,\n    resolution: msg.timelapse.resolution,\n    first: msg.timelapse.first,\n    last: msg.timelapse.last,\n    frames: msg.timelapse.frames,\n    size: msg.timelapse.size,\n    filename: msg.timelapse.filename,\n    url: '/'+msg.timelapse.id+'/'+msg.dateString+'/'+msg.timelapse.filename+\".avi\",\n    archive: msg.timelapse.archive,\n    retention: msg.timelapse.retention,\n    timestamp: new Date().getTime()\n}\n\nrecordings = global.get(\"recordings\") || [];\nrecordings.push(msg.payload);\nglobal.set(\"recordings\",recordings);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "0ee6cf98b0ea2cc4",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "New name",
        "func": "msg.payload = msg.dir + \"/\" + msg.timelapse.filename + \".avi \" + msg.dir + '/' + msg.timelapse.filename + '_' + msg.dateString + '.avi';\nmsg.timelapse.filename = msg.timelapse.filename + '_' + msg.dateString;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 200,
        "wires": [
            [
                "2f403193f484e5e6"
            ]
        ]
    },
    {
        "id": "2f403193f484e5e6",
        "type": "exec",
        "z": "a560a3dc68a59bb3",
        "command": "mv",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1210,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "d96bcd4c98464d4a"
            ]
        ]
    },
    {
        "id": "ed614f86465ed9a2",
        "type": "link out",
        "z": "db85d9978b91dbd7",
        "name": "",
        "links": [
            "47142e0d89ef9c11",
            "add861c3b97f0b64",
            "d17e01ecc1b633dd"
        ],
        "x": 1255,
        "y": 260,
        "wires": []
    },
    {
        "id": "d17e01ecc1b633dd",
        "type": "link in",
        "z": "db85d9978b91dbd7",
        "name": "",
        "links": [
            "ed614f86465ed9a2",
            "bf7e99355fe516c6",
            "112c53fed885877c"
        ],
        "x": 415,
        "y": 120,
        "wires": [
            [
                "daf8717e683a3087"
            ]
        ]
    },
    {
        "id": "6139342fb0a0d8e8",
        "type": "change",
        "z": "db85d9978b91dbd7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 200,
        "wires": [
            [
                "de80058919770885"
            ]
        ]
    },
    {
        "id": "de80058919770885",
        "type": "subflow:e5130f511bd00d68",
        "z": "db85d9978b91dbd7",
        "name": "",
        "x": 870,
        "y": 200,
        "wires": [
            [
                "bf7e99355fe516c6"
            ]
        ]
    },
    {
        "id": "bf7e99355fe516c6",
        "type": "link out",
        "z": "db85d9978b91dbd7",
        "name": "",
        "links": [
            "47142e0d89ef9c11",
            "add861c3b97f0b64",
            "d17e01ecc1b633dd"
        ],
        "x": 1035,
        "y": 200,
        "wires": []
    },
    {
        "id": "f0b276d12c1b4287",
        "type": "function",
        "z": "db85d9978b91dbd7",
        "name": "Init",
        "func": "msg.timelapse = JSON.parse(JSON.stringify(msg.payload));\n\ntimelapse = global.get(\"timelapse\");\ndelete timelapse[msg.timelapse.id];\nglobal.set(\"timelapse\",timelapse);\n\nrecordings = global.get(\"recordings\");\n\nvar keep = [];\nrecordings.forEach(function(item){\n    if( item.id !== msg.timelapse.id )\n        keep.push(item);\n});\n\nglobal.set(\"recordings\",keep);\nmsg.payload = '/recordings/' + msg.timelapse.id;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 340,
        "wires": [
            [
                "0c4cf66829f2402f",
                "112c53fed885877c"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "0c4cf66829f2402f",
        "type": "exec",
        "z": "db85d9978b91dbd7",
        "command": "rm -R ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1090,
        "y": 340,
        "wires": [
            [],
            [],
            [
                "1d90c2e35cf99a4c"
            ]
        ]
    },
    {
        "id": "1d90c2e35cf99a4c",
        "type": "switch",
        "z": "db85d9978b91dbd7",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 340,
        "wires": [
            [
                "fe5d1361f5436f62"
            ],
            [
                "54ff0c520c3f0257"
            ]
        ]
    },
    {
        "id": "fe5d1361f5436f62",
        "type": "function",
        "z": "db85d9978b91dbd7",
        "name": "Response",
        "func": "item = JSON.parse(JSON.stringify(msg.timelapse));\n\nmsg.payload = item;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "54ff0c520c3f0257",
        "type": "function",
        "z": "db85d9978b91dbd7",
        "name": "Error Message",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    error:\"Unable to delete files for \" + msg.timelapse.name\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "dc59904ad2d7ffb9",
        "type": "change",
        "z": "db85d9978b91dbd7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 340,
        "wires": [
            [
                "f0b276d12c1b4287"
            ]
        ]
    },
    {
        "id": "70b5fdc2b804ddcd",
        "type": "change",
        "z": "cff0ca7eba0f8f68",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "recordings",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 160,
        "wires": [
            [
                "59bd343cd59d56ab"
            ]
        ]
    },
    {
        "id": "1ae23501fee368bc",
        "type": "debug",
        "z": "cff0ca7eba0f8f68",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 220,
        "wires": []
    },
    {
        "id": "2164934435866920",
        "type": "inject",
        "z": "cff0ca7eba0f8f68",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "70b5fdc2b804ddcd"
            ]
        ]
    },
    {
        "id": "112c53fed885877c",
        "type": "link out",
        "z": "db85d9978b91dbd7",
        "name": "",
        "links": [
            "47142e0d89ef9c11",
            "add861c3b97f0b64",
            "d17e01ecc1b633dd"
        ],
        "x": 1055,
        "y": 400,
        "wires": []
    },
    {
        "id": "bfd3a7179620ad03",
        "type": "link out",
        "z": "1e258526bb8f28b2",
        "name": "",
        "links": [
            "add861c3b97f0b64"
        ],
        "x": 2195,
        "y": 280,
        "wires": []
    },
    {
        "id": "88d4831663baaa1c",
        "type": "link out",
        "z": "1e258526bb8f28b2",
        "name": "",
        "links": [
            "add861c3b97f0b64"
        ],
        "x": 1295,
        "y": 660,
        "wires": []
    },
    {
        "id": "7dc7a5ad122ae1d5",
        "type": "change",
        "z": "1e258526bb8f28b2",
        "name": "archive",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "recordings",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 660,
        "wires": [
            [
                "1473634cd80f1936"
            ]
        ]
    },
    {
        "id": "e501804a663e3dba",
        "type": "inject",
        "z": "1e258526bb8f28b2",
        "name": "Check retention",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 250,
        "y": 660,
        "wires": [
            [
                "7dc7a5ad122ae1d5"
            ]
        ]
    },
    {
        "id": "1473634cd80f1936",
        "type": "split",
        "z": "1e258526bb8f28b2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 660,
        "wires": [
            [
                "579b3bcb151284dc"
            ]
        ]
    },
    {
        "id": "579b3bcb151284dc",
        "type": "function",
        "z": "1e258526bb8f28b2",
        "name": "Retention expiered?",
        "func": "if(msg.payload.retention === 0 ) {\n    return;\n}\n\nnow = new Date().getTime();\nage = parseInt((now - msg.payload.timestamp)/(24*3600*1000));\nif( age <= msg.payload.retention )\n    return;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 660,
        "wires": [
            [
                "d16196f4663874ed"
            ]
        ]
    },
    {
        "id": "cb985d1f52e955ad",
        "type": "exec",
        "z": "eb92079299997bd1",
        "command": "rm -R",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "e08ca02b4f5a4da2",
        "type": "function",
        "z": "eb92079299997bd1",
        "name": "Remove",
        "func": "var paths = msg.payload.url.split('/');\nvar path = '/recordings/'+paths[0] + '/' + paths[1];\nmsg.payload = path;\n\nvar list = [];\nrecordings = global.get(\"recordings\") || [];\nrecordings.forEach(function(item){\n    if( msg.payload.url !== item.url )\n        list.push(item);\n});\nglobal.set(\"recordings\",recordings);\n\nmsg.payload = path;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "cb985d1f52e955ad"
            ]
        ]
    },
    {
        "id": "0478591acadb9f8f",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "Archive 500 MB?",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size > 500 MB",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 280,
        "wires": [
            [
                "a56c01216bc00b8b"
            ]
        ]
    },
    {
        "id": "a56c01216bc00b8b",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "> 500 MB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "512000000",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "b6245244729abecb"
            ]
        ]
    },
    {
        "id": "83a78d90aec0574b",
        "type": "subflow:e5130f511bd00d68",
        "z": "1e258526bb8f28b2",
        "name": "",
        "env": [],
        "x": 1790,
        "y": 280,
        "wires": [
            [
                "01d057bafc286320"
            ]
        ]
    },
    {
        "id": "01d057bafc286320",
        "type": "function",
        "z": "1e258526bb8f28b2",
        "name": "Response",
        "func": "msg.payload = msg.archive;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 280,
        "wires": [
            [
                "bfd3a7179620ad03"
            ]
        ]
    },
    {
        "id": "218bfa291b8a1e3d",
        "type": "subflow:a560a3dc68a59bb3",
        "z": "1e258526bb8f28b2",
        "name": "",
        "env": [],
        "x": 1560,
        "y": 280,
        "wires": [
            [
                "83a78d90aec0574b"
            ]
        ]
    },
    {
        "id": "0a2d598499422f80",
        "type": "inject",
        "z": "1e258526bb8f28b2",
        "name": "Archive daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 220,
        "y": 360,
        "wires": [
            [
                "4f8b13da3c0d34f3"
            ]
        ]
    },
    {
        "id": "4f8b13da3c0d34f3",
        "type": "change",
        "z": "1e258526bb8f28b2",
        "name": "timelapse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 360,
        "wires": [
            [
                "03b746824fe49242"
            ]
        ]
    },
    {
        "id": "03b746824fe49242",
        "type": "split",
        "z": "1e258526bb8f28b2",
        "name": "For each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 640,
        "y": 360,
        "wires": [
            [
                "d25e7216bce0c5fa"
            ]
        ]
    },
    {
        "id": "d25e7216bce0c5fa",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "Every day",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Every day",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1060,
        "y": 360,
        "wires": [
            [
                "b6245244729abecb"
            ]
        ]
    },
    {
        "id": "e29f5502f0251b02",
        "type": "inject",
        "z": "1e258526bb8f28b2",
        "name": "Every monday 00:00",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * 1",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 240,
        "y": 400,
        "wires": [
            [
                "5464289551f41bfa"
            ]
        ]
    },
    {
        "id": "5464289551f41bfa",
        "type": "change",
        "z": "1e258526bb8f28b2",
        "name": "timelapse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 400,
        "wires": [
            [
                "f1813a62ac2a1e38"
            ]
        ]
    },
    {
        "id": "f1813a62ac2a1e38",
        "type": "split",
        "z": "1e258526bb8f28b2",
        "name": "For each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 640,
        "y": 400,
        "wires": [
            [
                "596c586cbd9eea71"
            ]
        ]
    },
    {
        "id": "596c586cbd9eea71",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "Every week",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Every week",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1070,
        "y": 400,
        "wires": [
            [
                "b6245244729abecb"
            ]
        ]
    },
    {
        "id": "1313152031c070cd",
        "type": "inject",
        "z": "1e258526bb8f28b2",
        "name": "Every midnight",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "9a29f4517fcee4e6"
            ]
        ]
    },
    {
        "id": "f8bc54805e9bd945",
        "type": "change",
        "z": "1e258526bb8f28b2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 440,
        "wires": [
            [
                "92bc932e1d8a3f36"
            ]
        ]
    },
    {
        "id": "92bc932e1d8a3f36",
        "type": "split",
        "z": "1e258526bb8f28b2",
        "name": "For each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 840,
        "y": 440,
        "wires": [
            [
                "819ab5756b35b71c"
            ]
        ]
    },
    {
        "id": "819ab5756b35b71c",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "Every month",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Every month",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1070,
        "y": 440,
        "wires": [
            [
                "b6245244729abecb"
            ]
        ]
    },
    {
        "id": "9a29f4517fcee4e6",
        "type": "function",
        "z": "1e258526bb8f28b2",
        "name": "1:st of month?",
        "func": "if( new Date().getDate() === 1 )\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 440,
        "wires": [
            [
                "f8bc54805e9bd945"
            ]
        ]
    },
    {
        "id": "81721060c4e164a7",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "Archive 1 GB? ",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size_1000",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 320,
        "wires": [
            [
                "8c0d145a7113d4f6"
            ]
        ]
    },
    {
        "id": "8c0d145a7113d4f6",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "> 1 GB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1074000000",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1060,
        "y": 320,
        "wires": [
            [
                "b6245244729abecb"
            ]
        ]
    },
    {
        "id": "cd74a34b4ce323ee",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "Size > 200 MB",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size > 200 MB",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 240,
        "wires": [
            [
                "3259f1e3bb0a2819"
            ]
        ]
    },
    {
        "id": "3259f1e3bb0a2819",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "> 200 MB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "209715200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1060,
        "y": 240,
        "wires": [
            [
                "b6245244729abecb"
            ]
        ]
    },
    {
        "id": "c7cc1d5cfca28f5b",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "Size > 100 MB",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size > 100 MB",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 200,
        "wires": [
            [
                "26ee05023ccb8a0a"
            ]
        ]
    },
    {
        "id": "26ee05023ccb8a0a",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "> 100 MB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "104857600",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1060,
        "y": 200,
        "wires": [
            [
                "b6245244729abecb"
            ]
        ]
    },
    {
        "id": "92ae8906b7be3573",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "Size > 50 MB",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size > 50 MB",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 160,
        "wires": [
            [
                "343d5a65ef1a52f6"
            ]
        ]
    },
    {
        "id": "343d5a65ef1a52f6",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "> 50 MB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "52428800",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "b6245244729abecb"
            ]
        ]
    },
    {
        "id": "b6245244729abecb",
        "type": "change",
        "z": "1e258526bb8f28b2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 280,
        "wires": [
            [
                "218bfa291b8a1e3d"
            ]
        ]
    },
    {
        "id": "d16196f4663874ed",
        "type": "subflow:eb92079299997bd1",
        "z": "1e258526bb8f28b2",
        "name": "",
        "env": [],
        "x": 1050,
        "y": 660,
        "wires": [
            [
                "88d4831663baaa1c"
            ]
        ]
    },
    {
        "id": "6d1352661443c50f",
        "type": "template",
        "z": "596071a8177474d8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<p>\n    <a style=\"color:GreenYellow\" href=\"https://timelapse.aintegration.team/{{payload.id}}/{{payload.filename}}.avi\">Download (No index included)</a>\n</p>\n<p>\n    Add images by posting image as Base64 to<br/>\n    <div style=\"color:Aqua\">https://timelapse.aintegration.team/add/{{payload.id}}</div>\n</p>\n<p><i>Make sure to match image resolution to timelapse resolution</i></p>",
        "output": "str",
        "x": 1240,
        "y": 100,
        "wires": [
            [
                "dd42763d8b7dc788"
            ]
        ]
    },
    {
        "id": "1c36958a20ef1c26",
        "type": "ui_toast",
        "z": "596071a8177474d8",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 1670,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "dd42763d8b7dc788",
        "type": "change",
        "z": "596071a8177474d8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 100,
        "wires": [
            [
                "1c36958a20ef1c26"
            ]
        ]
    },
    {
        "id": "a3a1792e0ce360a9",
        "type": "link in",
        "z": "1e258526bb8f28b2",
        "name": "Check max size",
        "links": [
            "1cf35985c97fa874"
        ],
        "x": 575,
        "y": 160,
        "wires": [
            [
                "92ae8906b7be3573",
                "c7cc1d5cfca28f5b",
                "cd74a34b4ce323ee",
                "0478591acadb9f8f",
                "81721060c4e164a7"
            ]
        ]
    },
    {
        "id": "1cf35985c97fa874",
        "type": "link out",
        "z": "2d9ef7a6281fe338",
        "name": "",
        "links": [
            "a3a1792e0ce360a9"
        ],
        "x": 1885,
        "y": 160,
        "wires": []
    },
    {
        "id": "bf8e2b14f58af098",
        "type": "inject",
        "z": "1e258526bb8f28b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1000,
        "y": 880,
        "wires": [
            [
                "e478ea2b7f22a598"
            ]
        ]
    },
    {
        "id": "e478ea2b7f22a598",
        "type": "change",
        "z": "1e258526bb8f28b2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 880,
        "wires": [
            [
                "68fbe3fd2ab03f14"
            ]
        ]
    },
    {
        "id": "68fbe3fd2ab03f14",
        "type": "split",
        "z": "1e258526bb8f28b2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1380,
        "y": 880,
        "wires": [
            [
                "93fa5e3889f2e184",
                "1802b8a67d583719"
            ]
        ]
    },
    {
        "id": "93fa5e3889f2e184",
        "type": "debug",
        "z": "1e258526bb8f28b2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 800,
        "wires": []
    },
    {
        "id": "1802b8a67d583719",
        "type": "change",
        "z": "1e258526bb8f28b2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.retention",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.archive",
                "pt": "msg",
                "to": "Size > 50 MB",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1590,
        "y": 880,
        "wires": [
            [
                "3f9c109fbbd987a1",
                "a16d031ce36272f0"
            ]
        ]
    },
    {
        "id": "3f9c109fbbd987a1",
        "type": "debug",
        "z": "1e258526bb8f28b2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 820,
        "wires": []
    },
    {
        "id": "a16d031ce36272f0",
        "type": "function",
        "z": "1e258526bb8f28b2",
        "name": "",
        "func": "timelapse = global.get(\"timelapse\");\ntimelapse[msg.payload.id] = msg.payload;\nglobal.set(\"timelapse\",timelapse);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "f705520ea34a81ab",
        "type": "debug",
        "z": "596071a8177474d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 140,
        "wires": []
    },
    {
        "id": "7a76a83d49b3bea4",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "Size > 25 MB",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size > 25 MB",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 120,
        "wires": [
            [
                "b79e3341fa7bf56d"
            ]
        ]
    },
    {
        "id": "b79e3341fa7bf56d",
        "type": "switch",
        "z": "1e258526bb8f28b2",
        "name": "> 50 MB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "52428800",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "b6245244729abecb"
            ]
        ]
    }
]