[
    {
        "id": "596071a8177474d8",
        "type": "tab",
        "label": "Dashboard: Active",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7d50268eb1d2e7e8",
        "type": "tab",
        "label": "Logic: Active",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fa148583.ef6d28",
        "type": "tab",
        "label": "Dashboard: Admin",
        "disabled": false,
        "info": ""
    },
    {
        "id": "183cdbb2e87f2393",
        "type": "tab",
        "label": "Logic: Archive",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cff0ca7eba0f8f68",
        "type": "tab",
        "label": "Dashboard: Recordings",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8a3f9f233e0274f9",
        "type": "tab",
        "label": "Dashboard: Audit",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f31f5c9c29d86393",
        "type": "subflow",
        "name": "Add image",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "9ca8d4d0f9f4fef9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1260,
                "y": 80,
                "wires": [
                    {
                        "id": "f2e05e41c306a725",
                        "port": 0
                    }
                ]
            },
            {
                "x": 600,
                "y": 240,
                "wires": [
                    {
                        "id": "c94e1e4d8a7a908a",
                        "port": 1
                    },
                    {
                        "id": "9ca8d4d0f9f4fef9",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e5130f511bd00d68",
        "type": "subflow",
        "name": "Create/Reset AVI",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "a5d7faf5b0ac4fe0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "b3687da8536ee733",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a560a3dc68a59bb3",
        "type": "subflow",
        "name": "Archive Timelapse",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "db91db1ed6db3f7d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2020,
                "y": 160,
                "wires": [
                    {
                        "id": "fdccc01640370518",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2020,
                "y": 260,
                "wires": [
                    {
                        "id": "5e08d9fd56748a8e",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9ce50e8fbc15bf60",
        "type": "subflow",
        "name": "Export JPEG",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "3059bf3837f268a2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1600,
                "y": 60,
                "wires": [
                    {
                        "id": "173e24ca4eee3dbe",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1600,
                "y": 120,
                "wires": [
                    {
                        "id": "173e24ca4eee3dbe",
                        "port": 1
                    },
                    {
                        "id": "5d35533857628768",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2f36564cd70ed39d",
        "type": "group",
        "z": "fa148583.ef6d28",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "fc813a5f.1c42d8",
            "a2727fac.6b85d",
            "31986740.886c1",
            "eb946005.4f8c08",
            "e08415f.89aa868",
            "d85f9065.d3ce2",
            "fefe5a2d.badac8",
            "c2f7ec99.16a58",
            "5d517f1e88383027",
            "78f4df70e0b6e298",
            "d66f0f583ab6bfbb",
            "48ee5468e4996bb1",
            "7906531d115c037a"
        ],
        "x": 74,
        "y": 199
    },
    {
        "id": "1926b5b76dca6c09",
        "type": "group",
        "z": "fa148583.ef6d28",
        "name": "",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "c1f9d58d6436e1cc",
            "220cbb3477b3922f",
            "3f8bce50f6cbc2f6"
        ],
        "x": 74,
        "y": 79
    },
    {
        "id": "365b6b4c6277051d",
        "type": "group",
        "z": "fa148583.ef6d28",
        "name": "",
        "style": {
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "d68adbad.449c",
            "49e2e86e.12b76",
            "5363ffb6.fa583",
            "f514c996.b6f568",
            "e5789269.4a9d08",
            "ca9b2c12.93841",
            "d8999cd6.67383",
            "cbb73f1e.9f08a8",
            "fbfcec49.dde67",
            "8b2ea2d8.06e46",
            "d601f610.a553d",
            "976eaf84.af3b9",
            "c06f607e.3ce28",
            "3040f4ae.d582e4",
            "3fe10a79.1d3a1e",
            "ec189f34.3ed0e8",
            "652ff7aff4fda6f5",
            "e05119cde40b0cd8",
            "2efff6ed0878e6c2",
            "a4ae127710769e1d",
            "a4354bc736775854",
            "b760140386d553d7",
            "16be7c34e19834a5",
            "78cbba2376d3dcc2",
            "8dd46de4cca25dbd",
            "e90bae9c3385e4d7",
            "98f660d3faae65dd",
            "b8e9cb70bd6b8505",
            "f97993bfc87e34ce",
            "29940d55dc5f61c7",
            "58d336f66e2d11f5",
            "3ea315600bf65eb1",
            "e733ab067b94687c",
            "ef86d01e45f3c099",
            "184a239cd83eb84e",
            "96e220c2a576ddca",
            "44fe1edd03551593",
            "4664c6e0cb3b8deb",
            "7fcb7fbd04b6c9d9"
        ],
        "x": 74,
        "y": 359
    },
    {
        "id": "fa3b69d68608e3ed",
        "type": "group",
        "z": "596071a8177474d8",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "c4f8c02aa280fef4",
            "d130a0bc6221c94f",
            "47142e0d89ef9c11",
            "67ee02c040ac65f1",
            "5a6682c60e8aa728",
            "f3785d4fcc6e8cf3",
            "2852aa493536aa68",
            "89e387a9be0fb554",
            "82291db04b34ba0d",
            "40b7852c53b8f35f"
        ],
        "x": 94,
        "y": 99,
        "w": 1462,
        "h": 122
    },
    {
        "id": "976bbd287bc7bf1b",
        "type": "group",
        "z": "cff0ca7eba0f8f68",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "fc0cdc07ce41d775",
            "59bd343cd59d56ab",
            "b8a5f9df447e929a",
            "918194837a26ec8b",
            "6bbe107a8dd40fa5",
            "25f7f45261c4e605",
            "affc35a4690d508f",
            "add861c3b97f0b64",
            "ff3b6af679d085ea",
            "968e304998d8b490"
        ],
        "x": 94,
        "y": 79,
        "w": 1302,
        "h": 122
    },
    {
        "id": "f9d53230734e7dad",
        "type": "group",
        "z": "183cdbb2e87f2393",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "809a10dbe7012e13",
            "84e337098b9b74f1",
            "ec97013c01c50d25",
            "e266c5467ddac975",
            "663d20c9de4e897f",
            "c6ed6b7bca52f895",
            "1c40bf2fa5884104",
            "671c42753975b438",
            "2d11113ea7aee423",
            "2738073dda3f73ae",
            "d5fbfbdeb5afd513",
            "9faff9c4611748fe",
            "5d97ab64210add55",
            "0657e8f1894f2952",
            "d5cb0b206507f525",
            "0675b0c2e06b3051",
            "1f30f2cf4c384fef",
            "9405b987eda968f4",
            "098f0be29bb8b66c",
            "199be1f121abb720",
            "3e847b8c161aae6c",
            "f5137ed798297581",
            "bccad203237d6742",
            "74664eaa0a659023",
            "9592b374ed05503e",
            "8e9063b9ec28d475",
            "eca03ab293a29c64",
            "70dc50bdbd175404",
            "6c90ced2f771c561",
            "467cde0b5981e677",
            "e7997687c64c6a62",
            "ab1d28f53d5ed83b",
            "ee37fec0113e819f",
            "d7647d5cba9cdba8",
            "b2deab07cad9f8f8",
            "0cf0ac852ebdf4fa",
            "b98669f27f258ed3",
            "306c66b49cde01bb"
        ],
        "x": 74,
        "y": 459,
        "w": 2012,
        "h": 362
    },
    {
        "id": "55c8b55270555e6d",
        "type": "group",
        "z": "7d50268eb1d2e7e8",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "a513af22930bbd53",
            "fe9b51f56d2009b5",
            "e9abd47bce24f6ab",
            "c6db7c076ec9a49c",
            "92af646766ac5ad1",
            "e03510c59bef7961",
            "cdcde13037e32455",
            "4e3b5b644dc6e9c8"
        ],
        "x": 74,
        "y": 739,
        "w": 812,
        "h": 122
    },
    {
        "id": "cc052e15ef2c8e25",
        "type": "group",
        "z": "7d50268eb1d2e7e8",
        "name": "",
        "style": {
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "02f99a3b4346587b",
            "7a1e33297166f0b3",
            "c90867a9d7ae17f0",
            "dcfdbaee23754ac3"
        ],
        "x": 68,
        "y": 73,
        "w": 1204,
        "h": 634
    },
    {
        "id": "594d8dbdef3e84cc",
        "type": "group",
        "z": "183cdbb2e87f2393",
        "name": "GET /archive?secret=secret",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "75200e8d7a3b883f",
            "e5a0ca7a59993afb",
            "d3e8c1fc5f7b424c"
        ],
        "x": 74,
        "y": 59,
        "w": 622,
        "h": 82
    },
    {
        "id": "0edbc15e7e162394",
        "type": "group",
        "z": "7d50268eb1d2e7e8",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "58d39cd96c2510b8",
            "a16534ccd25695a5",
            "6947b75d87931811",
            "ae708f1ac50c2eb9",
            "5a080eda62bd97f7",
            "1069436ab18ba94d",
            "8ecc036f108018ff",
            "7e8356fd90928f82",
            "6d339f36614b6226",
            "3930fe216c3bf2c3"
        ],
        "x": 94,
        "y": 1099,
        "w": 1232,
        "h": 122
    },
    {
        "id": "c5d12929be161928",
        "type": "group",
        "z": "7d50268eb1d2e7e8",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "ccad7f91a1bb34ec",
            "18b5d6ef86dd6758",
            "e85bcaa7e210176a",
            "c84f3ad565301c5d",
            "02cb48181497cb30",
            "eeace0a363fbb268",
            "e62e31cd643c869c",
            "e3843400500f539d",
            "cd8c29941779abf3",
            "75e365a6c2fa1794",
            "a2e3d97b19daf769",
            "ef3a997f66eaec09",
            "21bec4ac726449c7"
        ],
        "x": 74,
        "y": 919,
        "w": 1762,
        "h": 122
    },
    {
        "id": "26a659d088955f0f",
        "type": "group",
        "z": "7d50268eb1d2e7e8",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "62c5063823236694",
            "e3aaac9c5133260a",
            "297615b654a5be95",
            "1bc5f45dd8a4176f"
        ],
        "x": 84,
        "y": 1279,
        "w": 402,
        "h": 122
    },
    {
        "id": "759fc361408b895b",
        "type": "group",
        "z": "183cdbb2e87f2393",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "5641b8610edf3381",
            "8d4003bf017c54f2",
            "8f62e7789f858c0e",
            "9e5c55eedd627152",
            "45bdafabfe344436",
            "872545ef2ff4bdba"
        ],
        "x": 74,
        "y": 159,
        "w": 1252,
        "h": 82
    },
    {
        "id": "2fdf6439b8d3cbac",
        "type": "group",
        "z": "183cdbb2e87f2393",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "7fb28f3c9e95f8a3",
            "adf50289d12a6e12",
            "4e3f03f701755b87"
        ],
        "x": 754,
        "y": 59,
        "w": 572,
        "h": 82
    },
    {
        "id": "d7f2e92eaaab36d3",
        "type": "group",
        "z": "183cdbb2e87f2393",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "45a8efad8d49c963",
            "58d035e75f20cb01",
            "65ef8dfd89115830",
            "0e13bc8e03485ee4",
            "f3ba4a09beb9869a",
            "8e81fda15faa3567"
        ],
        "x": 74,
        "y": 271.5,
        "w": 1072,
        "h": 97
    },
    {
        "id": "5451340ed7bfaccb",
        "type": "group",
        "z": "596071a8177474d8",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "c63c71bff9323edd",
            "85e0195528ad6c29",
            "683026f5abdeb93e",
            "daa94d149b810b2e",
            "40f55f35828ad9da",
            "4b64f0e51937086e",
            "a21d483b280506f7",
            "160d4fec656db880",
            "d66c7209eac2455b",
            "77425db410507033",
            "326b50c660a63473",
            "ef4d2e7c64d9477c",
            "e720155085572cb5",
            "43fed886f221ab6a",
            "859bb103856e8884",
            "eb4fcc54e06b4bb4",
            "d13593f7b0591f4f",
            "4f524ce35298faba"
        ],
        "x": 84,
        "y": 299,
        "w": 1242,
        "h": 322
    },
    {
        "id": "804f05cfa9ec951c",
        "type": "group",
        "z": "cff0ca7eba0f8f68",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "cdcbdf282f7aec19",
            "1184ef70d028bc09",
            "754a6258b902f464",
            "b0a6e8e0826a0415",
            "427c17891e478673",
            "fe639b680fafff18",
            "3507015ca4e9c18d",
            "5ff32edae7f11fec",
            "74460420d3dad6f3",
            "3c326eea27d7b2ab",
            "c1c7a9e50095f411",
            "832cc8d569fe26d7"
        ],
        "x": 94,
        "y": 239,
        "w": 1152,
        "h": 242
    },
    {
        "id": "c90867a9d7ae17f0",
        "type": "group",
        "z": "7d50268eb1d2e7e8",
        "g": "cc052e15ef2c8e25",
        "name": "Create timelapse {\"name\":\"name\",\"secret\":\"secret\",\"width\":640,\"height\":360,\"fps\":10}",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "bed0bd4cff456cc2",
            "ebf323b03165e25a",
            "419283ad35192629",
            "09778e694451b9dd",
            "fc6f7c99dc985bc4",
            "6b714a1c7e16451f"
        ],
        "x": 94,
        "y": 219,
        "w": 992,
        "h": 122
    },
    {
        "id": "7a1e33297166f0b3",
        "type": "group",
        "z": "7d50268eb1d2e7e8",
        "g": "cc052e15ef2c8e25",
        "name": "List timelapse ?secret=secret",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "65bd74d3084f0db0",
            "5b0978b69a96e235",
            "1479be401fdabc06"
        ],
        "x": 94,
        "y": 99,
        "w": 622,
        "h": 82
    },
    {
        "id": "02f99a3b4346587b",
        "type": "group",
        "z": "7d50268eb1d2e7e8",
        "g": "cc052e15ef2c8e25",
        "name": "Detele timelapse {\"name\":\"name\",\"secret\":\"secret\"}",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "201526d920c3fd07",
            "d3197a8453e262c8",
            "2cef766e1159b6cc",
            "f309128a4a8fd3c0",
            "5df394efd0d8893a",
            "177e109a68d1e6b1",
            "59d7e5d687e4eee9",
            "c09d75ba627b5d65"
        ],
        "x": 94,
        "y": 371.5,
        "w": 1152,
        "h": 149.5
    },
    {
        "id": "dcfdbaee23754ac3",
        "type": "group",
        "z": "7d50268eb1d2e7e8",
        "g": "cc052e15ef2c8e25",
        "name": "Create timelapse {\"name\":\"name\",\"secret\":\"secret\",\"width\":640,\"height\":360,\"fps\":10}",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "bfcaaf472409679f",
            "4da12cbc32f08957",
            "1d5743068297a0cf",
            "69a25630b76ddf87",
            "926d6ef43d097e8b",
            "555d3dabe0d43d20",
            "0c0da7e3bfb2ef0a"
        ],
        "x": 94,
        "y": 559,
        "w": 992,
        "h": 122
    },
    {
        "id": "51fa23c3767845f4",
        "type": "group",
        "z": "183cdbb2e87f2393",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b2be3d35f098b5a2",
            "7eef290adfc90846",
            "1a30724027326269",
            "9a5eaf314921b2b9",
            "164871d3bf340384",
            "1ef03b4d671a04fa"
        ],
        "x": 104,
        "y": 951.5,
        "w": 1202,
        "h": 97
    },
    {
        "id": "6f852839f990ba1f",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4b7a62be.0da094",
        "type": "ui_tab",
        "name": "Admin",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8205c4ed.a4a648",
        "type": "ui_group",
        "name": "List",
        "tab": "4b7a62be.0da094",
        "order": 1,
        "disp": false,
        "width": "15",
        "collapse": false
    },
    {
        "id": "f52791de3bc3856a",
        "type": "ui_spacer",
        "z": "7d50268eb1d2e7e8",
        "name": "spacer",
        "group": "8205c4ed.a4a648",
        "order": 4,
        "width": "10",
        "height": 1
    },
    {
        "id": "9ffd68a3.cf5118",
        "type": "axis-preset",
        "name": "",
        "address": "msg.address",
        "protocol": "http"
    },
    {
        "id": "5853939997be9702",
        "type": "ui_tab",
        "name": "Active",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c7561ec130ac6106",
        "type": "ui_group",
        "name": "List",
        "tab": "5853939997be9702",
        "order": 1,
        "disp": false,
        "width": "15",
        "collapse": false
    },
    {
        "id": "f94e782070da663f",
        "type": "ui_tab",
        "name": "Recordings",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6d0232f0fd507b32",
        "type": "ui_group",
        "name": "List",
        "tab": "f94e782070da663f",
        "order": 1,
        "disp": false,
        "width": "17",
        "collapse": false
    },
    {
        "id": "a1c14418.954cd8",
        "type": "ui_tab",
        "name": "Frame audit",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2052c4e9f7650fc7",
        "type": "ui_group",
        "name": "Default",
        "tab": "a1c14418.954cd8",
        "order": 1,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "7416b01f8931cc0b",
        "type": "ui_spacer",
        "z": "fa148583.ef6d28",
        "name": "spacer",
        "group": "8205c4ed.a4a648",
        "order": 2,
        "width": "10",
        "height": 1
    },
    {
        "id": "e875118841071156",
        "type": "ui_spacer",
        "z": "cff0ca7eba0f8f68",
        "name": "spacer",
        "group": "6d0232f0fd507b32",
        "order": 2,
        "width": "13",
        "height": 1
    },
    {
        "id": "ffbf1026d040325d",
        "type": "ui_spacer",
        "z": "596071a8177474d8",
        "name": "spacer",
        "group": "c7561ec130ac6106",
        "order": 2,
        "width": "11",
        "height": 1
    },
    {
        "id": "fc813a5f.1c42d8",
        "type": "http request",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "localhost:1880/timelapse",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 730,
        "y": 280,
        "wires": [
            [
                "a2727fac.6b85d"
            ]
        ]
    },
    {
        "id": "a2727fac.6b85d",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "List",
        "func": "list = [];\nmsg.payload.forEach(function(item){\n    item.new = false;\n    item.resolution = item.width + 'x' + item.height;\n    list.push(item);\n});\nmsg.payload = list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 280,
        "wires": [
            [
                "7906531d115c037a"
            ]
        ]
    },
    {
        "id": "31986740.886c1",
        "type": "link in",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "Refresh",
        "links": [
            "3040f4ae.d582e4",
            "6f42ad0.6fa89d4",
            "d63fa04a.f205a",
            "3f67bdd1.88f822",
            "84fd3bb0a0f268c8",
            "3f8bce50f6cbc2f6"
        ],
        "x": 215,
        "y": 280,
        "wires": [
            [
                "c2f7ec99.16a58"
            ]
        ]
    },
    {
        "id": "eb946005.4f8c08",
        "type": "link out",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "",
        "links": [
            "d68adbad.449c"
        ],
        "x": 1415,
        "y": 280,
        "wires": []
    },
    {
        "id": "d68adbad.449c",
        "type": "link in",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "links": [
            "eb946005.4f8c08",
            "c4964cf7.d45e88",
            "f87ee81a.4e7e6",
            "8b2ea2d8.06e46",
            "d66f0f583ab6bfbb"
        ],
        "x": 115,
        "y": 400,
        "wires": [
            [
                "cbb73f1e.9f08a8",
                "fbfcec49.dde67",
                "652ff7aff4fda6f5",
                "98f660d3faae65dd",
                "f97993bfc87e34ce",
                "29940d55dc5f61c7",
                "58d336f66e2d11f5",
                "3ea315600bf65eb1"
            ]
        ]
    },
    {
        "id": "e08415f.89aa868",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 280,
        "wires": [
            [
                "eb946005.4f8c08"
            ]
        ]
    },
    {
        "id": "49e2e86e.12b76",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "name",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse.name",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "e05119cde40b0cd8"
            ]
        ]
    },
    {
        "id": "5363ffb6.fa583",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.name",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 400,
        "wires": [
            [
                "8b2ea2d8.06e46"
            ]
        ]
    },
    {
        "id": "f514c996.b6f568",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "fps",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse.fps",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 440,
        "wires": [
            [
                "2efff6ed0878e6c2"
            ]
        ]
    },
    {
        "id": "e5789269.4a9d08",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.fps",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ca9b2c12.93841",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "resolution",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse.resolution",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 480,
        "wires": [
            [
                "a4ae127710769e1d"
            ]
        ]
    },
    {
        "id": "d8999cd6.67383",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.resolution",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "d85f9065.d3ce2",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"new\":true,\"name\":\"\",\"fps\":10,\"width\":640,\"height\":360,\"resolution\":\"640x360\",\"archive\":\"Size_100\",\"retention\":60}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "fefe5a2d.badac8"
            ]
        ]
    },
    {
        "id": "fefe5a2d.badac8",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 240,
        "wires": [
            [
                "d66f0f583ab6bfbb"
            ]
        ]
    },
    {
        "id": "cbb73f1e.9f08a8",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Visability",
        "func": "msg.enabled = false;\nif( msg.payload.new === true && msg.payload.name.length > 2 )\n    msg.enabled = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 620,
        "wires": [
            [
                "a4354bc736775854"
            ]
        ]
    },
    {
        "id": "fbfcec49.dde67",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Visability",
        "func": "if( msg.payload.new === false )\n    msg.enabled = true;\nelse\n    msg.enabled = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 740,
        "wires": [
            [
                "16be7c34e19834a5"
            ]
        ]
    },
    {
        "id": "8b2ea2d8.06e46",
        "type": "link out",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "links": [
            "d68adbad.449c"
        ],
        "x": 1005,
        "y": 400,
        "wires": []
    },
    {
        "id": "c2f7ec99.16a58",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "Reset  msg",
        "func": "msg = {topic:\"\",payload:\"\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "d85f9065.d3ce2",
                "78f4df70e0b6e298"
            ]
        ]
    },
    {
        "id": "d601f610.a553d",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Request",
        "func": "timelapse = flow.get(\"timelapse\");\nif(!timelapse) {\n    node.warn(\"No timelapse defined\");\n    return;\n}\n\nresolution = timelapse.resolution.split(\"x\");\ntimelapse.width = \ntimelapse.height = parseInt(resolution[1]);\n\nmsg.payload = {\n    name: timelapse.name,\n    width: parseInt(resolution[0]),\n    height: parseInt(resolution[1]),\n    fps: parseInt(timelapse.fps),\n    archive: timelapse.archive || \"None\",\n    retention: parseInt(timelapse.retention) || 0,\n    secret: global.get(\"secret\") || \"\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 620,
        "wires": [
            [
                "976eaf84.af3b9"
            ]
        ]
    },
    {
        "id": "976eaf84.af3b9",
        "type": "http request",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Create timelapse",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "localhost:1880/timelapse",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 730,
        "y": 620,
        "wires": [
            [
                "c06f607e.3ce28"
            ]
        ]
    },
    {
        "id": "c06f607e.3ce28",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Message",
        "func": "if( msg.statusCode < 300 ) {\n    msg.highlight = \"green\";\n    msg.payload = \"Success\";\n} else {\n    msg.highlight = \"red\";\n    msg.payload = msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 620,
        "wires": [
            [
                "3040f4ae.d582e4",
                "b760140386d553d7"
            ]
        ]
    },
    {
        "id": "3040f4ae.d582e4",
        "type": "link out",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "links": [
            "31986740.886c1"
        ],
        "x": 1095,
        "y": 580,
        "wires": []
    },
    {
        "id": "3fe10a79.1d3a1e",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Request",
        "func": "timelapse = flow.get(\"timelapse\") || null;\nif(!timelapse) {\n    node.warn(\"No timelapse selected\");\n    return;\n}\n\nmsg.payload = {\n    name: timelapse.name,\n    secret: global.get(\"secret\") || \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 740,
        "wires": [
            [
                "ec189f34.3ed0e8"
            ]
        ]
    },
    {
        "id": "ec189f34.3ed0e8",
        "type": "http request",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Delete timelapse",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "localhost:1880/timelapse",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 730,
        "y": 740,
        "wires": [
            [
                "c06f607e.3ce28"
            ]
        ]
    },
    {
        "id": "5d517f1e88383027",
        "type": "comment",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "Refresh",
        "info": "",
        "x": 150,
        "y": 280,
        "wires": []
    },
    {
        "id": "65bd74d3084f0db0",
        "type": "http in",
        "z": "7d50268eb1d2e7e8",
        "g": "7a1e33297166f0b3",
        "name": "",
        "url": "/timelapse",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "1479be401fdabc06"
            ]
        ]
    },
    {
        "id": "5b0978b69a96e235",
        "type": "http response",
        "z": "7d50268eb1d2e7e8",
        "g": "7a1e33297166f0b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 640,
        "y": 140,
        "wires": []
    },
    {
        "id": "9e5576cedc6e8078",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "file.avi",
        "func": "if(!msg.timelapse)\n    return;\n    \nmsg.filename = msg.payload.filepath + msg.timelapse.filename;\n\nfunction toLILEND( value, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = (value & 0xff);\n    buf[pos + 1] = ( (value >> 8 ) & 0xff);\n    buf[pos + 2] = ( (value >> 16 ) & 0xff);\n    buf[pos + 3] = ( (value >> 24 ) & 0xff);\n}\n\nfunction toFOURCC(text, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = text.charCodeAt(0);\n    buf[pos + 1] = text.charCodeAt(1);\n    buf[pos + 2] = text.charCodeAt(2);\n    buf[pos + 3] = text.charCodeAt(3);\n}\n\naviHeader = Buffer.alloc(240);\n\ntoFOURCC(\"RIFF\",aviHeader,0); //LIST_RIFF\ntoLILEND(240,aviHeader,1); //RIFF_size\ntoFOURCC(\"AVI \",aviHeader,2); //RIFF_toFOURCC\ntoFOURCC(\"LIST\",aviHeader,3); //LIST_HDRL\ntoLILEND(208,aviHeader,4); //hdrl_size\ntoFOURCC(\"hdrl\",aviHeader,5); //hdrl_name\ntoFOURCC(\"avih\",aviHeader,6); //avih\ntoLILEND(56,aviHeader,7); //avih_size\ntoLILEND(parseInt(1000000/msg.payload.fps),aviHeader,8); //AVIH_MicroSecPerFrame\ntoLILEND(6400,aviHeader,9); //AVIH_MaxBytesPerSec\ntoLILEND(0,aviHeader,10); //AVIH_PaddingGranularity\ntoLILEND(0x10,aviHeader,11); //AVIH_Flags = Has Index\n//toLILEND(0x0,aviHeader,11); //AVIH_Flags = Has Index\ntoLILEND(0,aviHeader,12); //AVIH_TotalFrames = 0\ntoLILEND(0,aviHeader,13); //AVIH_InitialFrames = 0\ntoLILEND(1,aviHeader,14); //AVIH_Streams = 1\ntoLILEND(0,aviHeader,15); //AVIH_SugestedBufferSize = 1\ntoLILEND(msg.payload.width,aviHeader,16); //AVIH_Width\ntoLILEND(msg.payload.height,aviHeader,17); //AVIH_Height\ntoLILEND(0,aviHeader,18); //AVIH_Reserved1\ntoLILEND(0,aviHeader,19); //AVIH_Reserved2\ntoLILEND(0,aviHeader,20); //AVIH_Reserved3\ntoLILEND(0,aviHeader,21); //AVIH_Reserved4\ntoFOURCC(\"LIST\",aviHeader,22); //LIST_strl\ntoLILEND(132,aviHeader,23); //LIST_strl_size\ntoFOURCC(\"strl\",aviHeader,24); //LIST_strl_name\ntoFOURCC(\"strh\",aviHeader,25); //STRH_name\ntoLILEND(48,aviHeader,26); //STRH_size\ntoFOURCC(\"vids\",aviHeader,27); //strh_fccType\ntoFOURCC(\"MJPG\",aviHeader,28); //strh_fccHandler\ntoLILEND(0,aviHeader,29); //strh_flags\ntoLILEND(0,aviHeader,30); //strh_priority\ntoLILEND(0,aviHeader,31); //strh_init_frames\ntoLILEND(1,aviHeader,32); //strh_scale\ntoLILEND(msg.payload.fps,aviHeader,33); //strh_scale\ntoLILEND(0,aviHeader,34); //strh_start\ntoLILEND(0,aviHeader,35); //strh_length (Number of frames)\ntoLILEND(64000,aviHeader,36); //strh_sugg_buff_sz (average size per JPEG)\ntoLILEND(0,aviHeader,37); //strh_quality\ntoLILEND(0,aviHeader,38); //strh_sample_sz\ntoFOURCC(\"strf\",aviHeader,39); //LIST_strf\ntoLILEND(40,aviHeader,40); //strf_size_list\ntoLILEND(40,aviHeader,41); //strf_size\ntoLILEND(msg.payload.width,aviHeader,42); //strf_width\ntoLILEND(msg.payload.height,aviHeader,43); //strf_height\ntoLILEND(1 + 24*256*256,aviHeader,44); //strf_planes_bit_cnt\ntoFOURCC(\"MJPG\",aviHeader,45); //strf_compression\ntoLILEND(msg.payload.width * msg.payload.height * 3,aviHeader,46); //strf_image_size\ntoLILEND(0,aviHeader,47); //strf_xpels_meter\ntoLILEND(0,aviHeader,48); //strf_ypels_meter\ntoLILEND(0,aviHeader,49); //strf_num_colors\ntoLILEND(0,aviHeader,50); //strf_imp_colors\ntoFOURCC(\"LIST\",aviHeader,51); //LIST_ODML\ntoLILEND(16,aviHeader,52); //LIST_ODML_Size\ntoFOURCC(\"odml\",aviHeader,53); //LIST_ODML_type\ntoFOURCC(\"dmlh\",aviHeader,54); //odml_toFOURCC\ntoLILEND(4,aviHeader,55); //odml_size\ntoLILEND(0,aviHeader,56); //odml_frames\ntoFOURCC(\"LIST\",aviHeader,57); //LIST_movi\ntoLILEND(4,aviHeader,58); //LIST_movi_size SUM( JPEG data size) + (8 * frames) + 4\ntoFOURCC(\"movi\",aviHeader,59); //LIST_movi_name\n\nmsg.payload = aviHeader;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "b3687da8536ee733"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "b3687da8536ee733",
        "type": "file",
        "z": "e5130f511bd00d68",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 570,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "bed0bd4cff456cc2",
        "type": "http in",
        "z": "7d50268eb1d2e7e8",
        "g": "c90867a9d7ae17f0",
        "name": "",
        "url": "/timelapse",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 260,
        "wires": [
            [
                "ebf323b03165e25a"
            ]
        ]
    },
    {
        "id": "ebf323b03165e25a",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "c90867a9d7ae17f0",
        "name": "Get Timelapse",
        "func": "if( !msg.payload.hasOwnProperty(\"name\") && msg.payload.length < 3 ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"name is required\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif( !msg.payload.hasOwnProperty(\"secret\") || typeof msg.payload.secret !== 'string')\n    msg.payload.secret = \"\";\n\nif( !msg.payload.hasOwnProperty(\"width\") ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"width is required\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\nmsg.payload.width = parseInt(msg.payload.width);\n\nif( !msg.payload.hasOwnProperty(\"height\") ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"height is required\"\n    }\n    node.send([null,msg]);\n    return;\n}\nmsg.payload.height = parseInt(msg.payload.height);\n\nif( !msg.payload.hasOwnProperty(\"fps\") ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"fps is required\"\n    }\n    node.send([null,msg]);\n    return;\n}\nmsg.payload.fps = parseInt(msg.payload.fps);\n\nnode.send([msg,null]);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 260,
        "wires": [
            [
                "6b714a1c7e16451f"
            ],
            [
                "419283ad35192629"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "419283ad35192629",
        "type": "http response",
        "z": "7d50268eb1d2e7e8",
        "g": "c90867a9d7ae17f0",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 620,
        "y": 300,
        "wires": []
    },
    {
        "id": "09778e694451b9dd",
        "type": "http response",
        "z": "7d50268eb1d2e7e8",
        "g": "c90867a9d7ae17f0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 260,
        "wires": []
    },
    {
        "id": "fc6f7c99dc985bc4",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "c90867a9d7ae17f0",
        "name": "Response",
        "func": "item = JSON.parse(JSON.stringify(msg.timelapse));\ndelete item.id;\ndelete item.owner;\ndelete item.secret;\ndelete item.filepath;\ndelete item.filename;\ndelete item.password;\nmsg.payload = item;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 260,
        "wires": [
            [
                "09778e694451b9dd"
            ]
        ]
    },
    {
        "id": "a5d7faf5b0ac4fe0",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "Init",
        "func": "msg.payload.id = msg.payload.name.replace(/\\s/g, \"_\");\nmsg.payload.filename = msg.payload.id + \".avi\";\n\nif(msg.payload.secret )\n    msg.payload.id += \"_\" + msg.payload.secret;\n    \nmsg.payload.filepath = global.get(\"storage\") + msg.payload.id + \"/\";\nmsg.payload.first = null;\nmsg.payload.last = null;\nmsg.payload.frames = 0;\nmsg.payload.size = 0;\nmsg.payload.downloads = 0;\n\ntimelapse = global.get(\"timelapse\") || {};\ntimelapse[msg.payload.id] = msg.payload;\nglobal.set(\"timelapse\", timelapse);\nmsg.timelapse = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "9e5576cedc6e8078",
                "c66d83bb7165bbb2",
                "7a50c35b16036baf"
            ]
        ]
    },
    {
        "id": "c94e1e4d8a7a908a",
        "type": "function",
        "z": "f31f5c9c29d86393",
        "name": "Add image to AVI",
        "func": "function fromLILEND( buf, dword ) {\n    var pos = dword * 4;\n     return (buf[pos+3] << 24) + (buf[pos+2] << 16) + (buf[pos+1] << 8) + buf[pos];\n}\n\nfunction toLILEND( value, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = (value & 0xff);\n    buf[pos + 1] = ( (value >> 8 ) & 0xff);\n    buf[pos + 2] = ( (value >> 16 ) & 0xff);\n    buf[pos + 3] = ( (value >> 24 ) & 0xff);\n}\n\nvar filepath = msg.timelapse.filepath + msg.timelapse.filename;\nvar padding = (4-(msg.payload.length%4)) % 4;\nvar jpegSize = msg.payload.length + padding;\n//node.warn(\"filepath=\"+filepath);\n//node.warn(\"padding=\"+padding);\n//node.warn(\"jpegSize=\"+jpegSize);\n\n\n//Adjust jpeg header\navi1String = \"AVI1\";\nmsg.payload[6] = avi1String.charCodeAt(0);\nmsg.payload[7] = avi1String.charCodeAt(1);\nmsg.payload[8] = avi1String.charCodeAt(2);\nmsg.payload[9] = avi1String.charCodeAt(3);\n\nfs.stat( filepath, function( error, stats) {\n    if(error) {\n        msg.payload = {\n            message: \"File does not exist\",\n            error: error\n        }\n        node.send([null,msg]);\n        return;\n    }\n//    node.warn(\"filesize=\"+stats.size);\n    fs.open(filepath,'r+',function(error,fd) {\n        if(error) {\n            msg.payload = {\n                message: \"File open failed\",\n                error: error\n            }\n            node.send([null,msg]);\n            return;\n        }\n        var header = new Buffer.alloc(240);\n        fs.read(fd,header,0,240,0,function(error,bytes){\n            if(error) {\n                msg.payload = {\n                    message: \"File read header failed\",\n                    error: error\n                }\n                node.send([null,msg]);\n                fs.close(fd,function(error){});\n                return;\n            }\n            if( bytes < 240 ) {\n                msg.payload = {\n                    message: \"File has corrupt header\",\n                    error: error\n                }\n                node.send([null,msg]);\n                fs.close(fd,function(error){});\n                return;\n            }\n    \n            msg.timelapse.size = fromLILEND(header,1);\n            msg.timelapse.frames = fromLILEND(header,12);\n\n            entry = Buffer.alloc(8);\n            var entryString = \"00db\";\n            entry[0] = entryString.charCodeAt(0);\n            entry[1] = entryString.charCodeAt(1);\n            entry[2] = entryString.charCodeAt(2);\n            entry[3] = entryString.charCodeAt(3);\n            toLILEND( jpegSize, entry, 1);\n            fs.write(fd,entry,0,8,stats.size,function(error,bytes) {\n                if(error) {\n                    msg.payload = {\n                        message: \"File write failed (entry)\",\n                        error: error\n                    }\n                    node.send([null,msg]);\n                    fs.close(fd,function(error){});\n                    return;\n                }\n//                fs.close(fd,function(error){});\n//                return;\n                fs.write(fd,msg.payload,0,msg.payload.length,stats.size+8,function(error,bytes) {\n                    if(error) {\n                        msg.payload = {\n                            message: \"File write failed (image)\",\n                            error: error\n                        }\n                        node.send([null,msg]);\n                        fs.close(fd,function(error){});\n                        return;\n                    }\n                    var paddingBuffer = Buffer.alloc(padding);\n                    fs.write(fd,paddingBuffer,0,padding,stats.size+8+msg.payload.length,function(error,bytes) {\n                        if(error) {\n                            msg.payload = {\n                                message: \"File write failed (padding)\",\n                                error: error\n                            }\n                            node.send([null,msg]);\n                            fs.close(fd,function(error){});\n                            return;\n                        }\n\n                        msg.timelapse.size += jpegSize + 8;\n                        msg.timelapse.frames++;\n                        msg.timelapse.last = new Date().getTime();\n                        if( !msg.timelapse.first )\n                            msg.timelapse.first = msg.timelapse.last;\n                        msg.timelapse.imageSize = jpegSize;\n\n                        toLILEND( msg.timelapse.size,header,1);\n                        toLILEND(msg.timelapse.frames,header,12);\n                        toLILEND( msg.timelapse.frames, header, 35 ); //strh_length\n                        toLILEND( parseInt(msg.timelapse.size/msg.timelapse.fps), header, 36 ); //strh_sugg_buff_sz\n                        toLILEND( msg.timelapse.frames, header, 56 ); //odml_frames\n                        toLILEND( msg.timelapse.size - 236, header, 58 );\n                        fs.write(fd,header,0,240,0,function(error,bytes) {\n                            if(error) {\n                                msg.payload = {\n                                    message: \"File write failed (header)\",\n                                    error: error\n                                }\n                                node.send([null,msg]);\n                                fs.close(fd,function(error){});\n                                return;\n                            }\n                            msg.payload = msg.timelapse;\n                            node.send([msg,null]);\n                            fs.close(fd,function(error){});\n                        });\n                    });\n                });\n            });\n        });\n    })\n});\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 430,
        "y": 80,
        "wires": [
            [
                "5be4f79459633289",
                "f16b3a141fae1bcf",
                "9afb7ea49ff24d7e"
            ],
            []
        ]
    },
    {
        "id": "9ca8d4d0f9f4fef9",
        "type": "function",
        "z": "f31f5c9c29d86393",
        "name": "Validate input",
        "func": "if(!msg.hasOwnProperty(\"timelapse\")) {\n   msg.payload = {\n        message: \"Image capture failed\",\n        error: \"timelapse object missing\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif( !Buffer.isBuffer(msg.payload) ) {\n    msg.payload = {\n        message: \"Image capture failed\",\n        error: \"Image input data needs to be a buffer\"\n    }\n    node.send([null,msg]);\n    return;\n}\nnode.send([msg,null]);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "c94e1e4d8a7a908a"
            ],
            []
        ]
    },
    {
        "id": "5be4f79459633289",
        "type": "function",
        "z": "f31f5c9c29d86393",
        "name": "avi.index",
        "func": "msg.filename = msg.timelapse.filepath + 'avi.index';\nmsg.payload = msg.timelapse.imageSize;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "39c1b932ebd963db"
            ]
        ]
    },
    {
        "id": "39c1b932ebd963db",
        "type": "file",
        "z": "f31f5c9c29d86393",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 910,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f16b3a141fae1bcf",
        "type": "function",
        "z": "f31f5c9c29d86393",
        "name": "avi.timestamp",
        "func": "msg.filename = msg.timelapse.filepath + 'avi.timestamp';\nmsg.payload = new Date().getTime();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 180,
        "wires": [
            [
                "39c1b932ebd963db"
            ]
        ]
    },
    {
        "id": "9afb7ea49ff24d7e",
        "type": "function",
        "z": "f31f5c9c29d86393",
        "name": "avi.json",
        "func": "msg.filename = msg.timelapse.filepath + 'avi.json';\nmsg.payload = msg.payload = JSON.stringify(msg.timelapse,null,'\\t');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 80,
        "wires": [
            [
                "c81eba4e09425ccd"
            ]
        ]
    },
    {
        "id": "c81eba4e09425ccd",
        "type": "file",
        "z": "f31f5c9c29d86393",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 80,
        "wires": [
            [
                "f2e05e41c306a725"
            ]
        ]
    },
    {
        "id": "1479be401fdabc06",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "7a1e33297166f0b3",
        "name": "List",
        "func": "timelapse = global.get(\"timelapse\") || {};\n\nsecret = msg.payload.hasOwnProperty(\"secret\")?msg.payload.secret:\"\";\n\nlist = [];\nfor(var id in timelapse ) {\n    if( timelapse[id].secret === secret) {\n        item = JSON.parse(JSON.stringify(timelapse[id]));\n\n        dir = item.filepath.split(\"/\");\n        path = \"/\"\n        if( dir.length > 3 )\n            path += dir[3] + \"/\";\n        if( dir.length > 4 )\n            path += dir[4] + \"/\";\n\n        item.url = path + item.filename;        \n        \n        delete item.filepath;\n        delete item.filename;\n        delete item.id;\n        delete item.secret;\n        \n        list.push(item);\n    }\n}\nmsg.payload = list;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "5b0978b69a96e235"
            ]
        ]
    },
    {
        "id": "f2e05e41c306a725",
        "type": "function",
        "z": "f31f5c9c29d86393",
        "name": "global.timelapse",
        "func": "timelapse = global.get(\"timelapse\");\ntimelapse[msg.timelapse.id] = msg.timelapse;\nglobal.set(\"timelapse\",timelapse);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c66d83bb7165bbb2",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "avi.timestamp",
        "func": "msg.filename = msg.payload.filepath + \"avi.timestamp\";\nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "35fbf992deb04261"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "7a50c35b16036baf",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "avi.index",
        "func": "msg.filename = msg.payload.filepath + \"avi.index\";\nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "35fbf992deb04261"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "35fbf992deb04261",
        "type": "file",
        "z": "e5130f511bd00d68",
        "name": "",
        "filename": "Remove file",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 610,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6b714a1c7e16451f",
        "type": "subflow:e5130f511bd00d68",
        "z": "7d50268eb1d2e7e8",
        "g": "c90867a9d7ae17f0",
        "name": "",
        "env": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "fc6f7c99dc985bc4"
            ]
        ]
    },
    {
        "id": "c1f9d58d6436e1cc",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "1926b5b76dca6c09",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "secret",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 120,
        "wires": [
            [
                "3f8bce50f6cbc2f6"
            ]
        ]
    },
    {
        "id": "201526d920c3fd07",
        "type": "http in",
        "z": "7d50268eb1d2e7e8",
        "g": "02f99a3b4346587b",
        "name": "",
        "url": "/timelapse",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "d3197a8453e262c8"
            ]
        ]
    },
    {
        "id": "d3197a8453e262c8",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "02f99a3b4346587b",
        "name": "Validate request",
        "func": "if( !msg.payload.hasOwnProperty(\"name\") ) {\n    msg.payload = {\n        error: \"Property name is required\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\ntimelapse = global.get(\"timelapse\") || {};\n\nsecret = msg.payload.hasOwnProperty(\"secret\")?msg.payload.secret:\"\";\n\nmsg.timelapse = null;\nfor(var id in timelapse ) {\n    if( timelapse[id].name === msg.payload.name && timelapse[id].secret === secret)\n        msg.timelapse = timelapse[id];\n}\n\nif( !msg.timelapse ) {\n    msg.payload = {\n        error: 'Timelpase ' + msg.payload.name + \" does not exists\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nmsg.payload = msg.timelapse.filepath\n\ndelete timelapse[msg.timelapse.id];\nglobal.set(\"timelapse\",timelapse);\nmsg.payload = msg.timelapse.filepath;\n\nnode.send([msg,null]);\nreturn;\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 420,
        "wires": [
            [
                "2cef766e1159b6cc"
            ],
            [
                "f309128a4a8fd3c0"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "2cef766e1159b6cc",
        "type": "exec",
        "z": "7d50268eb1d2e7e8",
        "g": "02f99a3b4346587b",
        "command": "rm -R ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 650,
        "y": 420,
        "wires": [
            [],
            [],
            [
                "59d7e5d687e4eee9"
            ]
        ]
    },
    {
        "id": "f309128a4a8fd3c0",
        "type": "http response",
        "z": "7d50268eb1d2e7e8",
        "g": "02f99a3b4346587b",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 660,
        "y": 480,
        "wires": []
    },
    {
        "id": "5df394efd0d8893a",
        "type": "http response",
        "z": "7d50268eb1d2e7e8",
        "g": "02f99a3b4346587b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 420,
        "wires": []
    },
    {
        "id": "177e109a68d1e6b1",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "02f99a3b4346587b",
        "name": "Error Message",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    error:\"Unable to delete files for \" + msg.timelapse.name\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 460,
        "wires": [
            [
                "5df394efd0d8893a"
            ]
        ]
    },
    {
        "id": "59d7e5d687e4eee9",
        "type": "switch",
        "z": "7d50268eb1d2e7e8",
        "g": "02f99a3b4346587b",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 420,
        "wires": [
            [
                "c09d75ba627b5d65"
            ],
            [
                "177e109a68d1e6b1"
            ]
        ]
    },
    {
        "id": "c09d75ba627b5d65",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "02f99a3b4346587b",
        "name": "Response",
        "func": "item = JSON.parse(JSON.stringify(msg.timelapse));\ndelete item.id;\ndelete item.secret;\ndelete item.filepath;\ndelete item.user;\ndelete item.password;\n\n\nmsg.payload = item;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 420,
        "wires": [
            [
                "5df394efd0d8893a"
            ]
        ]
    },
    {
        "id": "78f4df70e0b6e298",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "Secret",
        "func": "msg.payload = {\n    secret: global.get(\"secret\")\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 280,
        "wires": [
            [
                "fc813a5f.1c42d8"
            ]
        ]
    },
    {
        "id": "652ff7aff4fda6f5",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Enable",
        "func": "if(msg.payload.new === true)\n    msg.enabled = true;\nelse    \n    msg.enabled = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 400,
        "wires": [
            [
                "49e2e86e.12b76"
            ]
        ]
    },
    {
        "id": "2e6068c2b6f8c672",
        "type": "inject",
        "z": "7d50268eb1d2e7e8",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 40,
        "wires": [
            [
                "39e75105608ce3bf"
            ]
        ]
    },
    {
        "id": "39e75105608ce3bf",
        "type": "change",
        "z": "7d50268eb1d2e7e8",
        "name": "Set storage location",
        "rules": [
            {
                "t": "set",
                "p": "storage",
                "pt": "global",
                "to": "/data/timelapse/recordings/",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d66f0f583ab6bfbb",
        "type": "link out",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "",
        "links": [
            "d68adbad.449c"
        ],
        "x": 895,
        "y": 240,
        "wires": []
    },
    {
        "id": "e5e2574a910ec08e",
        "type": "catch",
        "z": "e5130f511bd00d68",
        "name": "",
        "scope": [
            "35fbf992deb04261"
        ],
        "uncaught": false,
        "x": 380,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "220cbb3477b3922f",
        "type": "ui_text_input",
        "z": "fa148583.ef6d28",
        "g": "1926b5b76dca6c09",
        "name": "Secret",
        "label": "Secret token [Optional]",
        "tooltip": "Something easy to remember & hard to guess (no spaces)",
        "group": "8205c4ed.a4a648",
        "order": 1,
        "width": "5",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "topicType": "str",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "c1f9d58d6436e1cc"
            ]
        ]
    },
    {
        "id": "48ee5468e4996bb1",
        "type": "ui_button",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "name": "",
        "group": "8205c4ed.a4a648",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "c2f7ec99.16a58"
            ]
        ]
    },
    {
        "id": "e05119cde40b0cd8",
        "type": "ui_text_input",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Name",
        "label": "Name",
        "tooltip": "",
        "group": "8205c4ed.a4a648",
        "order": 6,
        "width": "5",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "topicType": "str",
        "x": 530,
        "y": 400,
        "wires": [
            [
                "5363ffb6.fa583"
            ]
        ]
    },
    {
        "id": "2efff6ed0878e6c2",
        "type": "ui_numeric",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "FPS",
        "label": "FPS",
        "tooltip": "",
        "group": "8205c4ed.a4a648",
        "order": 7,
        "width": "5",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "str",
        "format": "{{value}}",
        "min": "3",
        "max": "60",
        "step": 1,
        "x": 530,
        "y": 440,
        "wires": [
            [
                "e5789269.4a9d08"
            ]
        ]
    },
    {
        "id": "a4ae127710769e1d",
        "type": "ui_dropdown",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "label": "Resolution",
        "tooltip": "",
        "place": "Select option",
        "group": "8205c4ed.a4a648",
        "order": 8,
        "width": "5",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "1920x1080 (16:9)",
                "value": "1920x1080",
                "type": "str"
            },
            {
                "label": "1280x720 (16:9)",
                "value": "1280x720",
                "type": "str"
            },
            {
                "label": "800x450  (16:9)",
                "value": "800x450",
                "type": "str"
            },
            {
                "label": "640x360 (16:9)",
                "value": "640x360",
                "type": "str"
            },
            {
                "label": "480x270 (16:9)",
                "value": "480x270",
                "type": "str"
            },
            {
                "label": "320x180 (16:9)",
                "value": "320x180",
                "type": "str"
            },
            {
                "label": "160x90 (16:9)",
                "value": "160x90",
                "type": "str"
            },
            {
                "label": "1920x1920 (1:1)",
                "value": "1920x1920",
                "type": "str"
            },
            {
                "label": "720x720 (1:1)",
                "value": "720x720",
                "type": "str"
            },
            {
                "label": "640x640 (1:1)",
                "value": "640x640",
                "type": "str"
            },
            {
                "label": "480x480 (1:1)",
                "value": "480x480",
                "type": "str"
            },
            {
                "label": "320x320 (1:1)",
                "value": "320x320",
                "type": "str"
            },
            {
                "label": "240x240 (1:1)",
                "value": "240x240",
                "type": "str"
            },
            {
                "label": "160x160 (1:1)",
                "value": "160x160",
                "type": "str"
            },
            {
                "label": "1280x960 (4:3)",
                "value": "1280x960",
                "type": "str"
            },
            {
                "label": "800x600 (4:3)",
                "value": "800x600",
                "type": "str"
            },
            {
                "label": "640x480 (4:3)",
                "value": "640x480",
                "type": "str"
            },
            {
                "label": "480x360 (4:3)",
                "value": "480x360",
                "type": "str"
            },
            {
                "label": "320x240 (4:3)",
                "value": "320x240",
                "type": "str"
            },
            {
                "label": "240x180 (4:3)",
                "value": "240x180",
                "type": "str"
            },
            {
                "label": "1440x1080 (4:3)",
                "value": "1440x1080",
                "type": "str"
            },
            {
                "label": "160x120 (4:3)",
                "value": "160x120",
                "type": "str"
            },
            {
                "label": "1440x900 (16:10)",
                "value": "1440x900",
                "type": "str"
            },
            {
                "label": "1280x800 (16:10)",
                "value": "1280x800",
                "type": "str"
            },
            {
                "label": "1024x640 (16:10)",
                "value": "1024x640",
                "type": "str"
            },
            {
                "label": "800x500 (16:10)",
                "value": "800x500",
                "type": "str"
            },
            {
                "label": "640x400 (16:10)",
                "value": "640x400",
                "type": "str"
            },
            {
                "label": "480x300 (16:10)",
                "value": "480x300",
                "type": "str"
            },
            {
                "label": "320x200 (16:10)",
                "value": "320x200",
                "type": "str"
            },
            {
                "label": "160x100 (16:10)",
                "value": "160x100 ",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "x": 550,
        "y": 480,
        "wires": [
            [
                "d8999cd6.67383"
            ]
        ]
    },
    {
        "id": "a4354bc736775854",
        "type": "ui_button",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "group": "8205c4ed.a4a648",
        "order": 12,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "Create",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Create",
        "topicType": "str",
        "x": 390,
        "y": 620,
        "wires": [
            [
                "d601f610.a553d"
            ]
        ]
    },
    {
        "id": "b760140386d553d7",
        "type": "ui_toast",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "position": "top right",
        "displayTime": "7",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1200,
        "y": 620,
        "wires": []
    },
    {
        "id": "16be7c34e19834a5",
        "type": "ui_button",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "group": "8205c4ed.a4a648",
        "order": 14,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Delete",
        "topicType": "str",
        "x": 390,
        "y": 740,
        "wires": [
            [
                "3fe10a79.1d3a1e"
            ]
        ]
    },
    {
        "id": "7906531d115c037a",
        "type": "ui_table",
        "z": "fa148583.ef6d28",
        "g": "2f36564cd70ed39d",
        "group": "8205c4ed.a4a648",
        "name": "",
        "order": 5,
        "width": "10",
        "height": "11",
        "columns": [
            {
                "field": "name",
                "title": "Name",
                "width": "30%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "resolution",
                "title": "Resolution",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "fps",
                "title": "FPS",
                "width": "12%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "archive",
                "title": "Archive",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "retention",
                "title": "Retention",
                "width": "18%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1030,
        "y": 280,
        "wires": [
            [
                "e08415f.89aa868"
            ]
        ]
    },
    {
        "id": "a7a38a3bd756ddea",
        "type": "function",
        "z": "e5130f511bd00d68",
        "name": "For Debug purpose: Parse AVI Header",
        "func": "function fromLILEND( buf, dword ) {\n    var pos = dword * 4;\n     return (buf[pos+3] << 24) + (buf[pos+2] << 16) + (buf[pos+1] << 8) + buf[pos];\n}\n\nfunction fromFOURCC( buf, dword) {\n    return buf.toString('utf8', dword*4, (dword*4) + 4);\n}\n\ntheBuffer = msg.payload;\n\ndata = {};\n\ndata.LIST_RIFF = fromFOURCC(theBuffer,0);\ndata.RIFF_size = fromLILEND(theBuffer,1);\ndata.RIFF_FOURCC = fromFOURCC(theBuffer,2);\ndata.LIST_HDRL = fromFOURCC(theBuffer,3);\ndata.hdrl_size = fromLILEND(theBuffer,4);\ndata.hdrl_name = fromFOURCC(theBuffer,5);\ndata.avih = fromFOURCC(theBuffer,6);\ndata.avih_size = fromLILEND(theBuffer,7);\ndata.AVIH_MicroSecPerFrame = fromLILEND(theBuffer,8);\ndata.AVIH_MaxBytesPerSec = fromLILEND(theBuffer,9);\ndata.AVIH_PaddingGranularity = fromLILEND(theBuffer,10);\ndata.AVIH_Flags = fromLILEND(theBuffer,11);\ndata.AVIH_TotalFrames = fromLILEND(theBuffer,12);\ndata.AVIH_InitialFrames = fromLILEND(theBuffer,13);\ndata.AVIH_Streams = fromLILEND(theBuffer,14);\ndata.AVIH_SugestedBufferSize = fromLILEND(theBuffer,15);\ndata.AVIH_Width = fromLILEND(theBuffer,16);\ndata.AVIH_Height = fromLILEND(theBuffer,17);\ndata.AVIH_Reserved1 = fromLILEND(theBuffer,18);\ndata.AVIH_Reserved2 = fromLILEND(theBuffer,19);\ndata.AVIH_Reserved3 = fromLILEND(theBuffer,20);\ndata.AVIH_Reserved4 = fromLILEND(theBuffer,21);\ndata.LIST_strl = fromFOURCC(theBuffer,22);\ndata.LIST_strl_size = fromLILEND(theBuffer,23);\ndata.LIST_strl_name = fromFOURCC(theBuffer,24);\ndata.STRH_name = fromFOURCC(theBuffer,25);\ndata.STRH_size = fromLILEND(theBuffer,26);\ndata.strh_fccType = fromFOURCC(theBuffer,27);\ndata.strh_fccHandler = fromFOURCC(theBuffer,28);\ndata.strh_flags = fromLILEND(theBuffer,29);\ndata.strh_priority = fromLILEND(theBuffer,30);\ndata.strh_init_frames  = fromLILEND(theBuffer,31);\ndata.strh_scale = fromLILEND(theBuffer,32);\ndata.strh_rate = fromLILEND(theBuffer,33);\ndata.strh_start = fromLILEND(theBuffer,34);\ndata.strh_length = fromLILEND(theBuffer,35);\ndata.strh_sugg_buff_sz = fromLILEND(theBuffer,36);\ndata.strh_quality = fromLILEND(theBuffer,37);\ndata.strh_sample_sz = fromLILEND(theBuffer,38);\ndata.LIST_strf = fromFOURCC(theBuffer,39);\ndata.strf_size_list = fromLILEND(theBuffer,40);\ndata.strf_size = fromLILEND(theBuffer,41);\ndata.strf_width = fromLILEND(theBuffer,42);\ndata.strf_height = fromLILEND(theBuffer,43);\ndata.strf_planes_bit_cnt = fromLILEND(theBuffer,44);\ndata.strf_compression = fromFOURCC(theBuffer,45);\ndata.strf_image_size = fromLILEND(theBuffer,46);\ndata.strf_xpels_meter = fromLILEND(theBuffer,47);\ndata.strf_ypels_meter = fromLILEND(theBuffer,48);\ndata.strf_num_colors = fromLILEND(theBuffer,49);\ndata.strf_imp_colors = fromLILEND(theBuffer,50);\ndata.LIST_ODML = fromFOURCC(theBuffer,51);\ndata.LIST_ODML_Size = fromLILEND(theBuffer,52);\ndata.LIST_ODML_type = fromFOURCC(theBuffer,53);\ndata.odml_fourCC = fromFOURCC(theBuffer,54);\ndata.odml_size = fromLILEND(theBuffer,55);\ndata.odml_frames = fromLILEND(theBuffer,56);\ndata.LIST_movi = fromFOURCC(theBuffer,57);\ndata.LIST_movi_size = fromLILEND(theBuffer,58);\ndata.LIST_movi_name = fromFOURCC(theBuffer,59);\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c4f8c02aa280fef4",
        "type": "http request",
        "z": "596071a8177474d8",
        "g": "fa3b69d68608e3ed",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "localhost:1880/timelapse",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 750,
        "y": 180,
        "wires": [
            [
                "d130a0bc6221c94f"
            ]
        ]
    },
    {
        "id": "d130a0bc6221c94f",
        "type": "function",
        "z": "596071a8177474d8",
        "g": "fa3b69d68608e3ed",
        "name": "List",
        "func": "list = [];\nmsg.payload.forEach(function(item){\n    size = parseInt(item.size / 1024);\n    filesize = size + \" KB\";\n    if( size > 1024 ) {\n        size = size / 1024;\n        filesize = size.toFixed(2) + \" MB\";\n    }\n    if( size > 1024 ) {\n        size = size / 1024;\n        filesize = sizesize.toFixed(2) + \" GB\";\n    }\n    f = new Date(item.first);\n    l = new Date(item.last);\n    \n    \n    item.new = false;\n    item.href = '<a href=\"' + item.url + '\">' + item.name + '</a>';\n    item.resolution = item.width + 'x' + item.height;\n    item.filesize = filesize;\n    item.firstDate = f.getFullYear() + \"-\" + (\"00\"+(f.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+f.getDate()).substr(-2,2);\n    item.lastDate = l.getFullYear() + \"-\" + (\"00\"+(l.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+l.getDate()).substr(-2,2);\n    list.push(item);\n});\nmsg.payload = list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 180,
        "wires": [
            [
                "2852aa493536aa68"
            ]
        ]
    },
    {
        "id": "47142e0d89ef9c11",
        "type": "link in",
        "z": "596071a8177474d8",
        "g": "fa3b69d68608e3ed",
        "name": "Refresh",
        "links": [
            "fb38ecdd539c93ea",
            "6f42ad0.6fa89d4",
            "d63fa04a.f205a",
            "3f67bdd1.88f822",
            "84fd3bb0a0f268c8",
            "7dea97eef5228f11",
            "f573bf43e5f5b130",
            "353248ec28ad6f24",
            "19d4a9447f818af2",
            "8ecc036f108018ff",
            "75e365a6c2fa1794",
            "160d4fec656db880"
        ],
        "x": 135,
        "y": 140,
        "wires": [
            [
                "89e387a9be0fb554"
            ]
        ]
    },
    {
        "id": "67ee02c040ac65f1",
        "type": "function",
        "z": "596071a8177474d8",
        "g": "fa3b69d68608e3ed",
        "name": "Reset  msg",
        "func": "msg = {topic:\"\",payload:\"\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 180,
        "wires": [
            [
                "5a6682c60e8aa728"
            ]
        ]
    },
    {
        "id": "5a6682c60e8aa728",
        "type": "function",
        "z": "596071a8177474d8",
        "g": "fa3b69d68608e3ed",
        "name": "Secret",
        "func": "msg.payload = {\n    secret: global.get(\"secret\") || \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 180,
        "wires": [
            [
                "c4f8c02aa280fef4"
            ]
        ]
    },
    {
        "id": "f3785d4fcc6e8cf3",
        "type": "ui_table",
        "z": "596071a8177474d8",
        "g": "fa3b69d68608e3ed",
        "group": "c7561ec130ac6106",
        "name": "",
        "order": 3,
        "width": "10",
        "height": "13",
        "columns": [
            {
                "field": "href",
                "title": "Name",
                "width": "25%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "frames",
                "title": "Frames",
                "width": "18%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "filesize",
                "title": "Size",
                "width": "17%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lastDate",
                "title": "Last",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "firstDate",
                "title": "First",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1190,
        "y": 180,
        "wires": [
            [
                "40b7852c53b8f35f"
            ]
        ]
    },
    {
        "id": "78cbba2376d3dcc2",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "archive",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse.archive",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 520,
        "wires": [
            [
                "8dd46de4cca25dbd"
            ]
        ]
    },
    {
        "id": "8dd46de4cca25dbd",
        "type": "ui_dropdown",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "label": "Frequency",
        "tooltip": "",
        "place": "Select option",
        "group": "8205c4ed.a4a648",
        "order": 10,
        "width": "5",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Never",
                "value": "None",
                "type": "str"
            },
            {
                "label": "Every day",
                "value": "Day",
                "type": "str"
            },
            {
                "label": "Every week",
                "value": "Week",
                "type": "str"
            },
            {
                "label": "Every month",
                "value": "Month",
                "type": "str"
            },
            {
                "label": "When size > 50 MB",
                "value": "Size_50",
                "type": "str"
            },
            {
                "label": "When size > 100 MB",
                "value": "Size_100",
                "type": "str"
            },
            {
                "label": "When size > 200 MB",
                "value": "Size_200",
                "type": "str"
            },
            {
                "label": "When size > 500 MB",
                "value": "Size_500",
                "type": "str"
            },
            {
                "label": "When size > 1 GB",
                "value": "Size_1000",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "str",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "e90bae9c3385e4d7"
            ]
        ]
    },
    {
        "id": "e90bae9c3385e4d7",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.archive",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "98f660d3faae65dd",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Visability",
        "func": "msg.enabled = false;\nif( msg.payload.new === false )\n    msg.enabled = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 700,
        "wires": [
            [
                "b8e9cb70bd6b8505"
            ]
        ]
    },
    {
        "id": "b8e9cb70bd6b8505",
        "type": "ui_button",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "group": "8205c4ed.a4a648",
        "order": 13,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "Update",
        "tooltip": "",
        "color": "",
        "bgcolor": "blue",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Update",
        "topicType": "str",
        "x": 400,
        "y": 700,
        "wires": [
            [
                "96e220c2a576ddca"
            ]
        ]
    },
    {
        "id": "f97993bfc87e34ce",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Enable",
        "func": "msg.enabled = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 440,
        "wires": [
            [
                "f514c996.b6f568"
            ]
        ]
    },
    {
        "id": "29940d55dc5f61c7",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Enable",
        "func": "if(msg.payload.new === true)\n    msg.enabled = true;\nelse    \n    msg.enabled = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 480,
        "wires": [
            [
                "ca9b2c12.93841"
            ]
        ]
    },
    {
        "id": "58d336f66e2d11f5",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Enable",
        "func": "msg.enabled = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 520,
        "wires": [
            [
                "78cbba2376d3dcc2"
            ]
        ]
    },
    {
        "id": "3ea315600bf65eb1",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Enable",
        "func": "msg.enabled = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 560,
        "wires": [
            [
                "e733ab067b94687c"
            ]
        ]
    },
    {
        "id": "e733ab067b94687c",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "fps",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse.retention",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 560,
        "wires": [
            [
                "ef86d01e45f3c099"
            ]
        ]
    },
    {
        "id": "ef86d01e45f3c099",
        "type": "ui_numeric",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Retention",
        "label": "Retention",
        "tooltip": "",
        "group": "8205c4ed.a4a648",
        "order": 11,
        "width": "5",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "str",
        "format": "{{value}} days",
        "min": "0",
        "max": "365",
        "step": "5",
        "x": 540,
        "y": 560,
        "wires": [
            [
                "184a239cd83eb84e"
            ]
        ]
    },
    {
        "id": "184a239cd83eb84e",
        "type": "change",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse.retention",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "96e220c2a576ddca",
        "type": "function",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Request",
        "func": "timelapse = flow.get(\"timelapse\");\nif(!timelapse) {\n    node.warn(\"No timelapse defined\");\n    return;\n}\n\nmsg.payload = {\n    name: timelapse.name,\n    fps: parseInt(timelapse.fps),\n    archive: timelapse.archive,\n    retention: parseInt(timelapse.retention),\n    secret: global.get(\"secret\") || \"\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 700,
        "wires": [
            [
                "44fe1edd03551593"
            ]
        ]
    },
    {
        "id": "44fe1edd03551593",
        "type": "http request",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "Update timelapse",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "localhost:1880/timelapse",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 730,
        "y": 700,
        "wires": [
            [
                "c06f607e.3ce28",
                "4664c6e0cb3b8deb"
            ]
        ]
    },
    {
        "id": "4664c6e0cb3b8deb",
        "type": "debug",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 700,
        "wires": []
    },
    {
        "id": "bfcaaf472409679f",
        "type": "http in",
        "z": "7d50268eb1d2e7e8",
        "g": "dcfdbaee23754ac3",
        "name": "",
        "url": "/timelapse",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 600,
        "wires": [
            [
                "4da12cbc32f08957"
            ]
        ]
    },
    {
        "id": "4da12cbc32f08957",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "dcfdbaee23754ac3",
        "name": "Validate input",
        "func": "if( !msg.payload.hasOwnProperty(\"name\") && msg.payload.length < 3 ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"name is required\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif( !msg.payload.hasOwnProperty(\"secret\") || typeof msg.payload.secret !== 'string')\n    msg.payload.secret = \"\";\n\nmsg.timelapse = null;\ntimelapse = global.get(\"timelapse\") || {};\nfor(var id in timelapse ) {\n    if( timelapse[id].name === msg.payload.name && timelapse[id].secret === msg.payload.secret)\n        msg.timelapse = timelapse[id];\n}\n\nif( !msg.timelapse ) {\n    msg.payload = {\n        error: 'Timelpase ' + msg.payload.name + \" does not exists\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif( msg.payload.hasOwnProperty(\"retention\"))\n    msg.payload.retention = parseInt(msg.payload.retention);\nif( msg.payload.hasOwnProperty(\"fps\"))\n    msg.payload.fps = parseInt(msg.payload.fps);\n\nnode.send([msg,null]);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 600,
        "wires": [
            [
                "926d6ef43d097e8b"
            ],
            [
                "555d3dabe0d43d20"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "1d5743068297a0cf",
        "type": "http response",
        "z": "7d50268eb1d2e7e8",
        "g": "dcfdbaee23754ac3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 600,
        "wires": []
    },
    {
        "id": "69a25630b76ddf87",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "dcfdbaee23754ac3",
        "name": "Response",
        "func": "item = JSON.parse(JSON.stringify(msg.timelapse));\ndelete item.id;\ndelete item.owner;\ndelete item.secret;\ndelete item.filepath;\ndelete item.filename;\ndelete item.password;\nmsg.payload = item;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 600,
        "wires": [
            [
                "1d5743068297a0cf"
            ]
        ]
    },
    {
        "id": "926d6ef43d097e8b",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "dcfdbaee23754ac3",
        "name": "TODO: Update",
        "func": "if( msg.payload.hasOwnProperty(\"retention\"))\n    msg.timelapse.retention = msg.payload.retention;\nif( msg.payload.hasOwnProperty(\"archive\"))\n    msg.timelapse.archive = msg.payload.archive;\nif( msg.payload.hasOwnProperty(\"fps\") && msg.payload.fps != msg.timelapse.fps ) {\n    node.warn(\"TODO: Update AVI fps\");\n}\n\ntimelapse = global.get(\"timelapse\");\ntimelapse[msg.timelapse.id] = msg.timelapse;\nglobal.set(\"timelapse\",timelapse);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 600,
        "wires": [
            [
                "69a25630b76ddf87"
            ]
        ]
    },
    {
        "id": "3f8bce50f6cbc2f6",
        "type": "link out",
        "z": "fa148583.ef6d28",
        "g": "1926b5b76dca6c09",
        "name": "",
        "links": [
            "31986740.886c1"
        ],
        "x": 485,
        "y": 120,
        "wires": []
    },
    {
        "id": "4ceb85c2dd44b375",
        "type": "exec",
        "z": "a560a3dc68a59bb3",
        "command": "mkdir",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 430,
        "y": 80,
        "wires": [
            [
                "2ae0db236c97c576"
            ],
            [],
            []
        ]
    },
    {
        "id": "db91db1ed6db3f7d",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Create directory",
        "func": "if( !msg.hasOwnProperty(\"timelapse\") ) {\n    node.warn(\"timelapse not set\");\n    return;\n}\n\nvar d = new Date();\nmsg.dir = msg.timelapse.filepath + d.getFullYear() + \"-\" + (\"00\"+(d.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+(d.getDate())).substr(-2,2);\nmsg.payload = msg.dir;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "4ceb85c2dd44b375"
            ]
        ]
    },
    {
        "id": "2ae0db236c97c576",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Move content",
        "func": "var d = new Date();\nmsg.payload = msg.timelapse.filepath + \"*.* \" + msg.dir;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 80,
        "wires": [
            [
                "a5dcbd64719f4e0a"
            ]
        ]
    },
    {
        "id": "a5dcbd64719f4e0a",
        "type": "exec",
        "z": "a560a3dc68a59bb3",
        "command": "mv",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 850,
        "y": 80,
        "wires": [
            [
                "e38732e228d5fd3b"
            ],
            [],
            []
        ]
    },
    {
        "id": "fdccc01640370518",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Reset Timelapse",
        "func": "archive = global.get(\"archive\") || {};\nmsg.archive = JSON.parse(JSON.stringify(msg.timelapse));\nmsg.archive.filepath = msg.dir + \"/\";\nmsg.archive.timestamp = new Date().getTime();\narchive[msg.dir] = msg.archive;\nglobal.set(\"archive\",archive);\nmsg.payload = msg.timelapse;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "474889fdde931a98",
        "type": "comment",
        "z": "a560a3dc68a59bb3",
        "name": "msg.payload must contain timelapse data structure",
        "info": "",
        "x": 250,
        "y": 20,
        "wires": []
    },
    {
        "id": "fc0cdc07ce41d775",
        "type": "http request",
        "z": "cff0ca7eba0f8f68",
        "g": "976bbd287bc7bf1b",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "localhost:1880/archive",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 550,
        "y": 160,
        "wires": [
            [
                "59bd343cd59d56ab"
            ]
        ]
    },
    {
        "id": "59bd343cd59d56ab",
        "type": "function",
        "z": "cff0ca7eba0f8f68",
        "g": "976bbd287bc7bf1b",
        "name": "List",
        "func": "list = [];\nmsg.payload.forEach(function(item){\n    size = parseInt(item.size / 1024);\n    filesize = size + \" KB\";\n    if( size > 1024 ) {\n        size = size / 1024;\n        filesize = size.toFixed(2) + \" MB\";\n    }\n    if( size > 1024 ) {\n        size = size / 1024;\n        filesize = sizesize.toFixed(2) + \" GB\";\n    }\n    \n    item.retentionMessage = \"Forever\";\n    if( item.retention > 0 ) {\n        var age = parseInt((new Date().getTime() - item.timestamp) / (1000*3600*24));\n        item.retentionMessage = (item.retention - age) + \" days\";\n    }\n    \n    f = new Date(item.first);\n    l = new Date(item.last);    \n    a = new Date(item.timestamp);    \n\n    item.new = false;\n    item.href = '<a href=\"' + item.url + '\">' + item.name + '</a>';\n    item.resolution = item.width + 'x' + item.height;\n    item.filesize = filesize;\n    item.firstDate = f.getFullYear() + \"-\" + (\"00\"+(f.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+f.getDate()).substr(-2,2);\n    item.lastDate = l.getFullYear() + \"-\" + (\"00\"+(l.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+l.getDate()).substr(-2,2);\n    item.archiveDate = a.getFullYear() + \"-\" + (\"00\"+(a.getMonth()+1)).substr(-2,2) + \"-\" + (\"00\"+a.getDate()).substr(-2,2);\n    list.push(item);\n});\nmsg.payload = list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 160,
        "wires": [
            [
                "25f7f45261c4e605"
            ]
        ]
    },
    {
        "id": "b8a5f9df447e929a",
        "type": "function",
        "z": "cff0ca7eba0f8f68",
        "g": "976bbd287bc7bf1b",
        "name": "Secret",
        "func": "msg.payload = {\n    secret: global.get(\"secret\") || \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 160,
        "wires": [
            [
                "fc0cdc07ce41d775"
            ]
        ]
    },
    {
        "id": "918194837a26ec8b",
        "type": "ui_table",
        "z": "cff0ca7eba0f8f68",
        "g": "976bbd287bc7bf1b",
        "group": "6d0232f0fd507b32",
        "name": "",
        "order": 3,
        "width": "12",
        "height": "11",
        "columns": [
            {
                "field": "archiveDate",
                "title": "Date",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "href",
                "title": "Timelapse",
                "width": "25%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "retentionMessage",
                "title": "Retention",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "frames",
                "title": "Frames",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "filesize",
                "title": "Size",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "firstDate",
                "title": "First frame",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 990,
        "y": 160,
        "wires": [
            [
                "affc35a4690d508f"
            ]
        ]
    },
    {
        "id": "6bbe107a8dd40fa5",
        "type": "ui_button",
        "z": "cff0ca7eba0f8f68",
        "g": "976bbd287bc7bf1b",
        "name": "",
        "group": "6d0232f0fd507b32",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "{\"name\":\"\",\"width\":160,\"height\":90,\"fps\":10,\"archive\":\"Day\",\"retention\":0,\"first\":null,\"last\":null,\"frames\":\"\",\"size\":\"\",\"downloads\":0,\"imageSize\":\"\",\"timestamp\":0,\"url\":\"\",\"retentionMessage\":\"\",\"new\":false,\"href\":\"\",\"resolution\":\"\",\"filesize\":\"\",\"firstDate\":\"\",\"lastDate\":\"\",\"archiveDate\":\"\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "b8a5f9df447e929a",
                "affc35a4690d508f"
            ]
        ]
    },
    {
        "id": "a2b846d0447a8642",
        "type": "comment",
        "z": "fa148583.ef6d28",
        "name": "Dashboard uses localhost request in order to provide and easy way to move/copy dashboard to other host",
        "info": "",
        "x": 440,
        "y": 40,
        "wires": []
    },
    {
        "id": "504004d9b183c48c",
        "type": "comment",
        "z": "596071a8177474d8",
        "name": "Dashboard uses localhost request in order to provide and easy way to move/copy dashboard to other host",
        "info": "",
        "x": 440,
        "y": 60,
        "wires": []
    },
    {
        "id": "874b7e0c30c10427",
        "type": "comment",
        "z": "cff0ca7eba0f8f68",
        "name": "Dashboard uses localhost request in order to provide and easy way to move/copy dashboard to other host",
        "info": "",
        "x": 460,
        "y": 40,
        "wires": []
    },
    {
        "id": "2852aa493536aa68",
        "type": "sort",
        "z": "596071a8177474d8",
        "g": "fa3b69d68608e3ed",
        "name": "",
        "order": "ascending",
        "as_num": false,
        "target": "payload",
        "targetType": "msg",
        "msgKey": "name",
        "msgKeyType": "jsonata",
        "seqKey": "payload",
        "seqKeyType": "msg",
        "x": 1050,
        "y": 180,
        "wires": [
            [
                "f3785d4fcc6e8cf3"
            ]
        ]
    },
    {
        "id": "89e387a9be0fb554",
        "type": "ui_button",
        "z": "596071a8177474d8",
        "g": "fa3b69d68608e3ed",
        "name": "",
        "group": "c7561ec130ac6106",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": true,
        "label": "refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "{\"name\":\"\",\"width\":\"\",\"height\":\"\",\"fps\":\"\",\"archive\":\"\",\"retention\":\"\",\"first\":null,\"last\":null,\"frames\":\"\",\"size\":\"\",\"downloads\":0,\"imageSize\":\"\",\"url\":\"\",\"new\":false,\"href\":\"\",\"resolution\":\"\",\"filesize\":\"\",\"firstDate\":\"\",\"lastDate\":\"\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 140,
        "wires": [
            [
                "67ee02c040ac65f1",
                "40b7852c53b8f35f"
            ]
        ]
    },
    {
        "id": "25f7f45261c4e605",
        "type": "sort",
        "z": "cff0ca7eba0f8f68",
        "g": "976bbd287bc7bf1b",
        "name": "",
        "order": "ascending",
        "as_num": false,
        "target": "payload",
        "targetType": "msg",
        "msgKey": "archiveDate",
        "msgKeyType": "jsonata",
        "seqKey": "payload",
        "seqKeyType": "msg",
        "x": 850,
        "y": 160,
        "wires": [
            [
                "918194837a26ec8b"
            ]
        ]
    },
    {
        "id": "7fcb7fbd04b6c9d9",
        "type": "ui_template",
        "z": "fa148583.ef6d28",
        "g": "365b6b4c6277051d",
        "group": "8205c4ed.a4a648",
        "name": "Auto-archive",
        "order": 9,
        "width": "5",
        "height": "1",
        "format": "<div style=\"color:#999999\">\n    <h3>Auto archive</h3>    \n</div>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1040,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "19d4a9447f818af2",
        "type": "link out",
        "z": "183cdbb2e87f2393",
        "name": "",
        "links": [
            "47142e0d89ef9c11"
        ],
        "x": 2175,
        "y": 620,
        "wires": []
    },
    {
        "id": "b2be3d35f098b5a2",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "51fa23c3767845f4",
        "name": "archive",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "archive",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "1a30724027326269"
            ]
        ]
    },
    {
        "id": "7eef290adfc90846",
        "type": "inject",
        "z": "183cdbb2e87f2393",
        "g": "51fa23c3767845f4",
        "name": "Every day",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 220,
        "y": 1000,
        "wires": [
            [
                "b2be3d35f098b5a2"
            ]
        ]
    },
    {
        "id": "1a30724027326269",
        "type": "split",
        "z": "183cdbb2e87f2393",
        "g": "51fa23c3767845f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 1000,
        "wires": [
            [
                "9a5eaf314921b2b9"
            ]
        ]
    },
    {
        "id": "9a5eaf314921b2b9",
        "type": "function",
        "z": "183cdbb2e87f2393",
        "g": "51fa23c3767845f4",
        "name": "Retention expiered",
        "func": "if(msg.payload.retention === 0 ) {\n    return;\n}\n\nnow = new Date().getTime();\nage = parseInt((now - msg.payload.timestamp)/(24*3600*1000));\nif( age <= msg.payload.retention )\n    return;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1000,
        "wires": [
            [
                "1ef03b4d671a04fa"
            ]
        ]
    },
    {
        "id": "809a10dbe7012e13",
        "type": "inject",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Every hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "84e337098b9b74f1",
                "f5137ed798297581",
                "467cde0b5981e677",
                "8e9063b9ec28d475",
                "d7647d5cba9cdba8"
            ]
        ]
    },
    {
        "id": "84e337098b9b74f1",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "timelapse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 620,
        "wires": [
            [
                "ec97013c01c50d25"
            ]
        ]
    },
    {
        "id": "ec97013c01c50d25",
        "type": "split",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "For  each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 620,
        "y": 620,
        "wires": [
            [
                "e266c5467ddac975"
            ]
        ]
    },
    {
        "id": "e266c5467ddac975",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Archive 500 MB?",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size_500",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 620,
        "wires": [
            [
                "663d20c9de4e897f"
            ]
        ]
    },
    {
        "id": "663d20c9de4e897f",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "> 500 MB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "512000000",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1040,
        "y": 620,
        "wires": [
            [
                "306c66b49cde01bb"
            ]
        ]
    },
    {
        "id": "c6ed6b7bca52f895",
        "type": "subflow:e5130f511bd00d68",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "",
        "x": 1770,
        "y": 620,
        "wires": [
            [
                "1c40bf2fa5884104"
            ]
        ]
    },
    {
        "id": "1c40bf2fa5884104",
        "type": "function",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Response",
        "func": "msg.payload = msg.archive;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 620,
        "wires": [
            [
                "19d4a9447f818af2"
            ]
        ]
    },
    {
        "id": "671c42753975b438",
        "type": "subflow:a560a3dc68a59bb3",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "",
        "env": [],
        "x": 1550,
        "y": 620,
        "wires": [
            [
                "c6ed6b7bca52f895"
            ],
            []
        ]
    },
    {
        "id": "2d11113ea7aee423",
        "type": "inject",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Archive daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 200,
        "y": 700,
        "wires": [
            [
                "2738073dda3f73ae"
            ]
        ]
    },
    {
        "id": "2738073dda3f73ae",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "timelapse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 700,
        "wires": [
            [
                "d5fbfbdeb5afd513"
            ]
        ]
    },
    {
        "id": "d5fbfbdeb5afd513",
        "type": "split",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "For each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 620,
        "y": 700,
        "wires": [
            [
                "9faff9c4611748fe"
            ]
        ]
    },
    {
        "id": "9faff9c4611748fe",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Daily?",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Day",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 700,
        "wires": [
            [
                "306c66b49cde01bb"
            ]
        ]
    },
    {
        "id": "5d97ab64210add55",
        "type": "inject",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Every monday 00:00",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * 1",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 220,
        "y": 740,
        "wires": [
            [
                "0657e8f1894f2952"
            ]
        ]
    },
    {
        "id": "0657e8f1894f2952",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "timelapse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 740,
        "wires": [
            [
                "d5cb0b206507f525"
            ]
        ]
    },
    {
        "id": "d5cb0b206507f525",
        "type": "split",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "For each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 620,
        "y": 740,
        "wires": [
            [
                "0675b0c2e06b3051"
            ]
        ]
    },
    {
        "id": "0675b0c2e06b3051",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Weekly?",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Week",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1040,
        "y": 740,
        "wires": [
            [
                "306c66b49cde01bb"
            ]
        ]
    },
    {
        "id": "1f30f2cf4c384fef",
        "type": "inject",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Every midnight",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 200,
        "y": 780,
        "wires": [
            [
                "3e847b8c161aae6c"
            ]
        ]
    },
    {
        "id": "9405b987eda968f4",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 780,
        "wires": [
            [
                "098f0be29bb8b66c"
            ]
        ]
    },
    {
        "id": "098f0be29bb8b66c",
        "type": "split",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "For each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 820,
        "y": 780,
        "wires": [
            [
                "199be1f121abb720"
            ]
        ]
    },
    {
        "id": "199be1f121abb720",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Daily?",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Day",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 780,
        "wires": [
            [
                "306c66b49cde01bb"
            ]
        ]
    },
    {
        "id": "3e847b8c161aae6c",
        "type": "function",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "1:st of month?",
        "func": "if( new Date().getDate() === 1 )\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 780,
        "wires": [
            [
                "9405b987eda968f4"
            ]
        ]
    },
    {
        "id": "f5137ed798297581",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "timelapse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 660,
        "wires": [
            [
                "bccad203237d6742"
            ]
        ]
    },
    {
        "id": "bccad203237d6742",
        "type": "split",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "For each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 620,
        "y": 660,
        "wires": [
            [
                "74664eaa0a659023"
            ]
        ]
    },
    {
        "id": "74664eaa0a659023",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Archive 1 GB? ",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size_1000",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 800,
        "y": 660,
        "wires": [
            [
                "9592b374ed05503e"
            ]
        ]
    },
    {
        "id": "9592b374ed05503e",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "> 1 GB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1074000000",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1040,
        "y": 660,
        "wires": [
            [
                "306c66b49cde01bb"
            ]
        ]
    },
    {
        "id": "968e304998d8b490",
        "type": "link out",
        "z": "cff0ca7eba0f8f68",
        "g": "976bbd287bc7bf1b",
        "name": "",
        "links": [
            "427c17891e478673"
        ],
        "x": 1355,
        "y": 120,
        "wires": []
    },
    {
        "id": "b005d06e233650e2",
        "type": "function",
        "z": "8a3f9f233e0274f9",
        "name": "Secret",
        "func": "msg.payload = {\n    secret: global.get(\"secret\") || \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 240,
        "wires": [
            [
                "196f3e6453b173ad"
            ]
        ]
    },
    {
        "id": "196f3e6453b173ad",
        "type": "http request",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "localhost:1880/timelapse",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 510,
        "y": 240,
        "wires": [
            [
                "4217b7c768e69f76"
            ]
        ]
    },
    {
        "id": "c838de302eaf22cb",
        "type": "function",
        "z": "8a3f9f233e0274f9",
        "name": "List",
        "func": "var recordings = {};\nmsg.options = [];\n\nmsg.payload.forEach(function(item){\n    recordings[item.name] = item;\n    msg.options.push(item.name);\n});\n\nflow.set(\"recordings\",recordings);\nmsg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 240,
        "wires": [
            [
                "b6cdb139df1cdca1"
            ]
        ]
    },
    {
        "id": "4217b7c768e69f76",
        "type": "sort",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "order": "ascending",
        "as_num": false,
        "target": "payload",
        "targetType": "msg",
        "msgKey": "name",
        "msgKeyType": "jsonata",
        "seqKey": "payload",
        "seqKeyType": "msg",
        "x": 670,
        "y": 240,
        "wires": [
            [
                "c838de302eaf22cb"
            ]
        ]
    },
    {
        "id": "b6cdb139df1cdca1",
        "type": "ui_dropdown",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "",
        "group": "2052c4e9f7650fc7",
        "order": 2,
        "width": "5",
        "height": "1",
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 960,
        "y": 240,
        "wires": [
            [
                "b4a60284a3034a8a"
            ]
        ]
    },
    {
        "id": "d2bfdd9f78afac20",
        "type": "ui_button",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "group": "2052c4e9f7650fc7",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "RESET",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "b005d06e233650e2",
                "ca4b5332374bb802"
            ]
        ]
    },
    {
        "id": "f21789f8ee312eb8",
        "type": "ui_template",
        "z": "8a3f9f233e0274f9",
        "group": "2052c4e9f7650fc7",
        "name": "Image",
        "order": 4,
        "width": "13",
        "height": "9",
        "format": "<img src=\"data:image/jpeg;base64, {{msg.payload.jpeg}}\" style=\"width:100%;\">\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 830,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "ea51f56c8d9bb07b",
        "type": "ui_button",
        "z": "8a3f9f233e0274f9",
        "name": "Previous",
        "group": "2052c4e9f7650fc7",
        "order": 6,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "skip_previous",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 180,
        "y": 460,
        "wires": [
            [
                "044ebeb4d8b87b05"
            ]
        ]
    },
    {
        "id": "194e88e4a2a33c3e",
        "type": "ui_slider",
        "z": "8a3f9f233e0274f9",
        "name": "Slider",
        "label": "",
        "tooltip": "",
        "group": "2052c4e9f7650fc7",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 650,
        "y": 380,
        "wires": [
            [
                "391dc17e0cb2c0cf"
            ]
        ]
    },
    {
        "id": "ead4c5f48510581c",
        "type": "ui_button",
        "z": "8a3f9f233e0274f9",
        "name": "Next",
        "group": "2052c4e9f7650fc7",
        "order": 7,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "skip_next",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "24bbaa2b6fb8b5de"
            ]
        ]
    },
    {
        "id": "67c0b1b04b5dc092",
        "type": "ui_template",
        "z": "8a3f9f233e0274f9",
        "group": "2052c4e9f7650fc7",
        "name": "Timestamp",
        "order": 8,
        "width": "8",
        "height": "1",
        "format": "<h3>{{msg.payload}}</h3>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 990,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "ce9bbbe6bb108375",
        "type": "comment",
        "z": "8a3f9f233e0274f9",
        "name": "Dashboard uses localhost request in order to provide and easy way to move/copy dashboard to other host",
        "info": "",
        "x": 460,
        "y": 60,
        "wires": []
    },
    {
        "id": "55284252ad6e0eef",
        "type": "ui_template",
        "z": "8a3f9f233e0274f9",
        "group": "2052c4e9f7650fc7",
        "name": "Frames",
        "order": 3,
        "width": "4",
        "height": "1",
        "format": "<h3>{{msg.payload.frames}} frames</h3>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 440,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b4a60284a3034a8a",
        "type": "change",
        "z": "8a3f9f233e0274f9",
        "name": "Timelapse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "recordings[msg.payload]",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "timelapse",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "b86906a95bba558b"
            ]
        ]
    },
    {
        "id": "b86906a95bba558b",
        "type": "link out",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "links": [
            "dd8468bce92ecd02"
        ],
        "x": 1325,
        "y": 240,
        "wires": []
    },
    {
        "id": "ca4b5332374bb802",
        "type": "link out",
        "z": "8a3f9f233e0274f9",
        "name": "Reset",
        "links": [
            "4f3568d121768970"
        ],
        "x": 315,
        "y": 280,
        "wires": []
    },
    {
        "id": "dd8468bce92ecd02",
        "type": "link in",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "links": [
            "b86906a95bba558b"
        ],
        "x": 255,
        "y": 380,
        "wires": [
            [
                "55284252ad6e0eef",
                "39289454a24fc946"
            ]
        ]
    },
    {
        "id": "4f3568d121768970",
        "type": "link in",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "links": [
            "ca4b5332374bb802"
        ],
        "x": 135,
        "y": 340,
        "wires": [
            [
                "a5d8499e028c1670"
            ]
        ]
    },
    {
        "id": "a5d8499e028c1670",
        "type": "function",
        "z": "8a3f9f233e0274f9",
        "name": "Reset",
        "func": "msg.payload = {\n    frames: \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 340,
        "wires": [
            [
                "55284252ad6e0eef"
            ]
        ]
    },
    {
        "id": "39289454a24fc946",
        "type": "change",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"min\":1,\"max\":100}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "ui_control.max",
                "pt": "msg",
                "to": "payload.frames",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 380,
        "wires": [
            [
                "194e88e4a2a33c3e"
            ]
        ]
    },
    {
        "id": "ad6d261e5395e74e",
        "type": "link in",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "links": [
            "ce3088361e4537da",
            "2c488e06fcecf745"
        ],
        "x": 135,
        "y": 620,
        "wires": [
            [
                "3bcac20bf43bb1ed"
            ]
        ]
    },
    {
        "id": "dcb6360c93711446",
        "type": "comment",
        "z": "8a3f9f233e0274f9",
        "name": "Timelapse",
        "info": "",
        "x": 1410,
        "y": 240,
        "wires": []
    },
    {
        "id": "0fe28790cc8fb0ff",
        "type": "comment",
        "z": "8a3f9f233e0274f9",
        "name": "Timelapse",
        "info": "",
        "x": 140,
        "y": 380,
        "wires": []
    },
    {
        "id": "3bcac20bf43bb1ed",
        "type": "function",
        "z": "8a3f9f233e0274f9",
        "name": "Request frame",
        "func": "timelapse = flow.get(\"timelapse\");\nif(!timelapse) {\n    node.warn(\"No timelapse selected\");\n    return;\n}\n\nmsg.payload = {\n    name: timelapse.name,\n    secret: global.get(\"secret\") || \"\",\n    index: flow.get(\"index\") || 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 620,
        "wires": [
            [
                "7e5068af6996e3e0"
            ]
        ]
    },
    {
        "id": "7e5068af6996e3e0",
        "type": "http request",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "localhost:1880/frame",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 470,
        "y": 620,
        "wires": [
            [
                "715afd8c642e56d9"
            ]
        ]
    },
    {
        "id": "a513af22930bbd53",
        "type": "http in",
        "z": "7d50268eb1d2e7e8",
        "g": "55c8b55270555e6d",
        "name": "",
        "url": "/frame",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 780,
        "wires": [
            [
                "fe9b51f56d2009b5"
            ]
        ]
    },
    {
        "id": "fe9b51f56d2009b5",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "55c8b55270555e6d",
        "name": "Validate input",
        "func": "if( !msg.payload.hasOwnProperty(\"name\") ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"name is required\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif( !msg.payload.hasOwnProperty(\"index\") ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"index is required\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nmsg.frameIndex = parseInt(msg.payload.index);\nif( msg.frameIndex < 1  ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"invalid index\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\n\nif( !msg.payload.hasOwnProperty(\"secret\") || typeof msg.payload.secret !== 'string')\n    msg.payload.secret = \"\";\n\nmsg.timelapse = null;\ntimelapse = global.get(\"timelapse\") || {};\nfor(var id in timelapse ) {\n    if( timelapse[id].name === msg.payload.name && timelapse[id].secret === msg.payload.secret)\n        msg.timelapse = timelapse[id];\n}\n\nif( !msg.timelapse ) {\n    msg.payload = {\n        error: 'Timelpase ' + msg.payload.name + \" does not exists\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif( msg.frameIndex > timelapse.frames ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"invalid index\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nnode.send([msg,null]);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 780,
        "wires": [
            [
                "c6db7c076ec9a49c"
            ],
            [
                "92af646766ac5ad1"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "e9abd47bce24f6ab",
        "type": "http response",
        "z": "7d50268eb1d2e7e8",
        "g": "55c8b55270555e6d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 780,
        "wires": []
    },
    {
        "id": "3059bf3837f268a2",
        "type": "function",
        "z": "9ce50e8fbc15bf60",
        "name": "Index file path",
        "func": "msg.filename = msg.timelapse.filepath + \"avi.index\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "9c99a3d985faa8ad"
            ]
        ]
    },
    {
        "id": "9c99a3d985faa8ad",
        "type": "file in",
        "z": "9ce50e8fbc15bf60",
        "name": "Read Index File",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "6157ca9e09671c02"
            ]
        ]
    },
    {
        "id": "7214953a8b723459",
        "type": "catch",
        "z": "9ce50e8fbc15bf60",
        "name": "",
        "scope": [
            "9c99a3d985faa8ad",
            "a2f35c16424ea052"
        ],
        "uncaught": false,
        "x": 1250,
        "y": 140,
        "wires": [
            [
                "5d35533857628768"
            ]
        ]
    },
    {
        "id": "5d35533857628768",
        "type": "change",
        "z": "9ce50e8fbc15bf60",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Corrupt file",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "430655105d42dd4c",
        "type": "function",
        "z": "9ce50e8fbc15bf60",
        "name": "Timestamp file path",
        "func": "msg.filename = msg.timelapse.filepath + \"avi.timestamp\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 80,
        "wires": [
            [
                "a2f35c16424ea052"
            ]
        ]
    },
    {
        "id": "a2f35c16424ea052",
        "type": "file in",
        "z": "9ce50e8fbc15bf60",
        "name": "Read Timestamp File",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1020,
        "y": 80,
        "wires": [
            [
                "9c26df35dc3a2ca6"
            ]
        ]
    },
    {
        "id": "6157ca9e09671c02",
        "type": "function",
        "z": "9ce50e8fbc15bf60",
        "name": "msg.position",
        "func": "index = msg.payload.split(\"\\n\");\nmsg.position = 240;\nmsg.size = parseInt(index[msg.frameIndex-1]);\nfor( var i = 1; i < msg.frameIndex; i++)\n    msg.position += parseInt(index[i-1]);\nmsg.position += msg.frameIndex * 8;\nmsg.payload = msg.position;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "430655105d42dd4c"
            ]
        ]
    },
    {
        "id": "9c26df35dc3a2ca6",
        "type": "function",
        "z": "9ce50e8fbc15bf60",
        "name": "msg.timestamp",
        "func": "index = msg.payload.split(\"\\n\");\nmsg.timestamp = parseInt(index[msg.frameIndex-1]);\nmsg.payload = msg.timestamp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 80,
        "wires": [
            [
                "173e24ca4eee3dbe"
            ]
        ]
    },
    {
        "id": "173e24ca4eee3dbe",
        "type": "function",
        "z": "9ce50e8fbc15bf60",
        "name": "Extract JPEG",
        "func": "var filepath = msg.timelapse.filepath + msg.timelapse.filename;\n\nfs.open(filepath,'r+',function(error,fd) {\n    if(error) {\n        msg.payload = {\n            message: \"File open failed\",\n            error: error\n        }\n        node.send([null,msg]);\n        return;\n    }\n    var data = new Buffer.alloc(msg.size);\n    fs.read(fd,data,0,msg.size,msg.position,function(error,bytes){\n        if(error) {\n            msg.payload = {\n                message: \"File read header failed\",\n                error: error\n            }\n            node.send([null,msg]);\n            fs.close(fd,function(error){});\n            return;\n        }\n        if( bytes < msg.size ) {\n            msg.payload = {\n                message: \"Corrupt data\",\n                error: error\n            }\n            node.send([null,msg]);\n            fs.close(fd,function(error){});\n            return;\n        }\n        fs.close(fd,function(error){});\n        msg.payload = {\n            position: msg.position,\n            index: msg.frameIndex,\n            size: msg.size,\n            timestamp: msg.timestamp,\n            jpeg: data.toString('base64')\n        }\n        node.send([msg,null]);\n    })\n});\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 1430,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "715afd8c642e56d9",
        "type": "switch",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "300",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 620,
        "wires": [
            [
                "f21789f8ee312eb8",
                "cc29e81750c18358"
            ],
            []
        ]
    },
    {
        "id": "cc29e81750c18358",
        "type": "function",
        "z": "8a3f9f233e0274f9",
        "name": "format",
        "func": "d = new Date(msg.payload.timestamp);\nmsg.payload = d.getFullYear()+\"-\"+ \n              ('0'+(d.getMonth()+1)).substr(-2,2)+\"-\"+ \n              ('0'+d.getDate()).substr(-2,2) + \" \" + \n              ('0'+d.getHours()).substr(-2,2)+\":\"+ \n              ('0'+d.getMinutes()).substr(-2,2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 660,
        "wires": [
            [
                "67c0b1b04b5dc092"
            ]
        ]
    },
    {
        "id": "24bbaa2b6fb8b5de",
        "type": "function",
        "z": "8a3f9f233e0274f9",
        "name": "Index++",
        "func": "index = flow.get(\"index\");\nif(!index)\n    return;\ntimelapse = flow.get(\"timelapse\");\nif(!timelapse)\n    return;\nif( index >= timelapse.frames)\n    return;\nindex++;\nflow.set(\"index\",index);\nmsg.payload = index;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 520,
        "wires": [
            [
                "194e88e4a2a33c3e"
            ]
        ]
    },
    {
        "id": "391dc17e0cb2c0cf",
        "type": "change",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 380,
        "wires": [
            [
                "2c488e06fcecf745"
            ]
        ]
    },
    {
        "id": "2c488e06fcecf745",
        "type": "link out",
        "z": "8a3f9f233e0274f9",
        "name": "",
        "links": [
            "ad6d261e5395e74e"
        ],
        "x": 915,
        "y": 380,
        "wires": []
    },
    {
        "id": "044ebeb4d8b87b05",
        "type": "function",
        "z": "8a3f9f233e0274f9",
        "name": "Index--",
        "func": "index = flow.get(\"index\");\nif(!index)\n    return;\ntimelapse = flow.get(\"timelapse\");\nif(!timelapse)\n    return;\nif( index < 2 )\n    return;\nindex--;\nflow.set(\"index\",index);\nmsg.payload = index;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 460,
        "wires": [
            [
                "194e88e4a2a33c3e"
            ]
        ]
    },
    {
        "id": "c6db7c076ec9a49c",
        "type": "subflow:9ce50e8fbc15bf60",
        "z": "7d50268eb1d2e7e8",
        "g": "55c8b55270555e6d",
        "x": 610,
        "y": 780,
        "wires": [
            [
                "e9abd47bce24f6ab"
            ],
            [
                "4e3b5b644dc6e9c8"
            ]
        ]
    },
    {
        "id": "8e9063b9ec28d475",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "timelapse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 580,
        "wires": [
            [
                "eca03ab293a29c64"
            ]
        ]
    },
    {
        "id": "eca03ab293a29c64",
        "type": "split",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "For  each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 620,
        "y": 580,
        "wires": [
            [
                "70dc50bdbd175404"
            ]
        ]
    },
    {
        "id": "70dc50bdbd175404",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Archive 200 MB?",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size_200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 580,
        "wires": [
            [
                "6c90ced2f771c561"
            ]
        ]
    },
    {
        "id": "6c90ced2f771c561",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "> 200 MB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "209715200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1040,
        "y": 580,
        "wires": [
            [
                "306c66b49cde01bb"
            ]
        ]
    },
    {
        "id": "467cde0b5981e677",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "timelapse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 540,
        "wires": [
            [
                "e7997687c64c6a62"
            ]
        ]
    },
    {
        "id": "e7997687c64c6a62",
        "type": "split",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "For  each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 620,
        "y": 540,
        "wires": [
            [
                "ab1d28f53d5ed83b"
            ]
        ]
    },
    {
        "id": "ab1d28f53d5ed83b",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Archive 100 MB?",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size_100",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 540,
        "wires": [
            [
                "ee37fec0113e819f"
            ]
        ]
    },
    {
        "id": "ee37fec0113e819f",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "> 100 MB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "104857600",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1040,
        "y": 540,
        "wires": [
            [
                "306c66b49cde01bb"
            ]
        ]
    },
    {
        "id": "d7647d5cba9cdba8",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "timelapse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "timelapse",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 500,
        "wires": [
            [
                "b2deab07cad9f8f8"
            ]
        ]
    },
    {
        "id": "b2deab07cad9f8f8",
        "type": "split",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "For  each",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 620,
        "y": 500,
        "wires": [
            [
                "0cf0ac852ebdf4fa"
            ]
        ]
    },
    {
        "id": "0cf0ac852ebdf4fa",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "Archive 50 MB?",
        "property": "payload.archive",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Size_50",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 800,
        "y": 500,
        "wires": [
            [
                "b98669f27f258ed3"
            ]
        ]
    },
    {
        "id": "b98669f27f258ed3",
        "type": "switch",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "> 50 MB",
        "property": "payload.size",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "52428800",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1040,
        "y": 500,
        "wires": [
            [
                "306c66b49cde01bb"
            ]
        ]
    },
    {
        "id": "e38732e228d5fd3b",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Index file path",
        "func": "msg.filename = msg.dir + \"/avi.index\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 80,
        "wires": [
            [
                "aaf5c247ffea5b09"
            ]
        ]
    },
    {
        "id": "aaf5c247ffea5b09",
        "type": "file in",
        "z": "a560a3dc68a59bb3",
        "name": "Read Index File",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1280,
        "y": 80,
        "wires": [
            [
                "5e0ab07d5f94a46f"
            ]
        ]
    },
    {
        "id": "5e0ab07d5f94a46f",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "msg.index",
        "func": "index = msg.payload.split(\"\\n\");\nmsg.index = [];\n\nfor(var i = 0; i < index.length; i++ ) {\n    if( index[i].length > 2 )\n        msg.index.push(parseInt(index[i]))\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 80,
        "wires": [
            [
                "5e08d9fd56748a8e"
            ]
        ]
    },
    {
        "id": "5e08d9fd56748a8e",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Update Header",
        "func": "\nfunction fromLILEND( buf, dword ) {\n    var pos = dword * 4;\n     return (buf[pos+3] << 24) + (buf[pos+2] << 16) + (buf[pos+1] << 8) + buf[pos];\n}\n\nfunction fromFOURCC( buf, dword) {\n    return buf.toString('utf8', dword*4, (dword*4) + 4);\n}\n\nfunction toLILEND( value, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = (value & 0xff);\n    buf[pos + 1] = ( (value >> 8 ) & 0xff);\n    buf[pos + 2] = ( (value >> 16 ) & 0xff);\n    buf[pos + 3] = ( (value >> 24 ) & 0xff);\n}\n\nfunction toFOURCC(text, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = text.charCodeAt(0);\n    buf[pos + 1] = text.charCodeAt(1);\n    buf[pos + 2] = text.charCodeAt(2);\n    buf[pos + 3] = text.charCodeAt(3);\n}\n\nfs.open(msg.dir + \"/\" + msg.timelapse.filename, 'r+',function(error,fd) {\n    if(error) {\n        msg.payload = {\n            message: \"File open failed\",\n            error: error\n        }\n        node.send([null,msg]);\n        return;\n    }\n    var header = new Buffer.alloc(240);\n    fs.read(fd,header,0,240,0,function(error,bytes){\n        if(error) {\n            msg.payload = {\n                message: \"File read header failed\",\n                error: error\n            }\n            node.send([null,msg]);\n            fs.close(fd,function(error){});\n            return;\n        }\n        if( bytes < 240 ) {\n            msg.payload = {\n                message: \"File has corrupt header\",\n                error: error\n            }\n            node.send([null,msg]);\n            fs.close(fd,function(error){});\n            return;\n        }\n        riffSize = fromLILEND( header,1); //RIFF Size\n        riffSize += msg.index.length * 16;\n        toLILEND( riffSize,header,1);\n        fs.write(fd,header,0,240,0,function(error,bytes) {\n            if(error) {\n                msg.payload = {\n                    message: \"File write failed (header)\",\n                    error: error\n                }\n                node.send([null,msg]);\n                fs.close(fd,function(error){});\n                return;\n            }\n            node.send([msg,null]);\n            fs.close(fd,function(error){});\n        });\n        fs.close(fd,function(error){});\n    });\n    \n});    \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "ae591ccf2f993d64"
            ],
            []
        ]
    },
    {
        "id": "ae591ccf2f993d64",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Create index buffer",
        "func": "function toLILEND( value, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = (value & 0xff);\n    buf[pos + 1] = ( (value >> 8 ) & 0xff);\n    buf[pos + 2] = ( (value >> 16 ) & 0xff);\n    buf[pos + 3] = ( (value >> 24 ) & 0xff);\n}\n\nfunction toFOURCC(text, buf, dword) {\n    pos = dword * 4;\n    buf[pos + 0] = text.charCodeAt(0);\n    buf[pos + 1] = text.charCodeAt(1);\n    buf[pos + 2] = text.charCodeAt(2);\n    buf[pos + 3] = text.charCodeAt(3);\n}\n\nvar size = 8 + ( msg.index.length * 16 );\n\nbuffer = Buffer.alloc(8+(msg.index.length*16));\n\n//Initialize index\ntoFOURCC(\"idx1\",buffer,0);\ntoLILEND(msg.index.length*16,buffer,1);\n\nvar offset = 4;\nvar dword = 2;\nfor(var i=0; i<msg.index.length; i++ ) {\n    toFOURCC(\"00db\",buffer,dword++);\n    toLILEND(0x10,buffer,dword++); //Flags\n    toLILEND(offset,buffer,dword++);\n    toLILEND(msg.index[i],buffer,dword++); //JPEG Size\n    offset += msg.index[i] + 8;\n}\n\nnode.warn(\"Index buffer: \" + buffer.length);\n\nmsg.payload = buffer;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 160,
        "wires": [
            [
                "7901521cd2342e85"
            ]
        ]
    },
    {
        "id": "7901521cd2342e85",
        "type": "function",
        "z": "a560a3dc68a59bb3",
        "name": "Append to AVI",
        "func": "msg.filename = msg.dir + '/' + msg.timelapse.filename;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 160,
        "wires": [
            [
                "08ec6738786d170d"
            ]
        ]
    },
    {
        "id": "08ec6738786d170d",
        "type": "file",
        "z": "a560a3dc68a59bb3",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1670,
        "y": 160,
        "wires": [
            [
                "fdccc01640370518"
            ]
        ]
    },
    {
        "id": "306c66b49cde01bb",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "f9d53230734e7dad",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 620,
        "wires": [
            [
                "671c42753975b438"
            ]
        ]
    },
    {
        "id": "5641b8610edf3381",
        "type": "http in",
        "z": "183cdbb2e87f2393",
        "g": "759fc361408b895b",
        "name": "",
        "url": "/archive",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "8d4003bf017c54f2"
            ]
        ]
    },
    {
        "id": "8d4003bf017c54f2",
        "type": "function",
        "z": "183cdbb2e87f2393",
        "g": "759fc361408b895b",
        "name": "Validate request",
        "func": "if( !msg.payload.hasOwnProperty(\"name\") )\n    throw \"name is required\";\n\ntimelapse = global.get(\"timelapse\") || {};\n\nsecret = msg.payload.hasOwnProperty(\"secret\")?msg.payload.secret:\"\";\n\nmsg.timelapse = null;\nfor(var id in timelapse ) {\n    if( timelapse[id].name === msg.payload.name && timelapse[id].secret === secret)\n        msg.timelapse = timelapse[id];\n}\n\nif( !msg.timelapse )\n    throw 'Timelpase ' + msg.payload.name + \" does not exists\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            [
                "45bdafabfe344436"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "8f62e7789f858c0e",
        "type": "function",
        "z": "183cdbb2e87f2393",
        "g": "759fc361408b895b",
        "name": "Response",
        "func": "item = JSON.parse(JSON.stringify(msg.timelapse));\ndelete item.id;\ndelete item.secret;\ndelete item.filepath;\ndelete item.user;\ndelete item.password;\n\n\nmsg.payload = item;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 200,
        "wires": [
            [
                "9e5c55eedd627152"
            ]
        ]
    },
    {
        "id": "9e5c55eedd627152",
        "type": "http response",
        "z": "183cdbb2e87f2393",
        "g": "759fc361408b895b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1250,
        "y": 200,
        "wires": []
    },
    {
        "id": "7fb28f3c9e95f8a3",
        "type": "http response",
        "z": "183cdbb2e87f2393",
        "g": "2fdf6439b8d3cbac",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1240,
        "y": 100,
        "wires": []
    },
    {
        "id": "45bdafabfe344436",
        "type": "subflow:a560a3dc68a59bb3",
        "z": "183cdbb2e87f2393",
        "g": "759fc361408b895b",
        "name": "",
        "env": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "872545ef2ff4bdba"
            ],
            []
        ]
    },
    {
        "id": "872545ef2ff4bdba",
        "type": "subflow:e5130f511bd00d68",
        "z": "183cdbb2e87f2393",
        "g": "759fc361408b895b",
        "name": "",
        "x": 870,
        "y": 200,
        "wires": [
            [
                "8f62e7789f858c0e"
            ]
        ]
    },
    {
        "id": "75200e8d7a3b883f",
        "type": "http in",
        "z": "183cdbb2e87f2393",
        "g": "594d8dbdef3e84cc",
        "name": "",
        "url": "/archive",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "d3e8c1fc5f7b424c"
            ]
        ]
    },
    {
        "id": "e5a0ca7a59993afb",
        "type": "http response",
        "z": "183cdbb2e87f2393",
        "g": "594d8dbdef3e84cc",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "d3e8c1fc5f7b424c",
        "type": "function",
        "z": "183cdbb2e87f2393",
        "g": "594d8dbdef3e84cc",
        "name": "List",
        "func": "archive = global.get(\"archive\") || {};\n\nsecret = msg.payload.hasOwnProperty(\"secret\")?msg.payload.secret:\"\";\n\nlist = [];\nfor(var id in archive ) {\n    if( archive[id].secret === secret) {\n        item = JSON.parse(JSON.stringify(archive[id]));\n\n        dir = item.filepath.split(\"/\");\n        path = \"/\"\n        if( dir.length > 3 )\n            path += dir[3] + \"/\";\n        if( dir.length > 4 )\n            path += dir[4] + \"/\";\n        if( dir.length > 5 )\n            path += dir[5] + \"/\";\n\n        item.url = path + item.filename;        \n        \n        delete item.filepath;\n        delete item.filename;\n        delete item.id;\n        delete item.secret;\n        \n        list.push(item);\n    }\n}\nmsg.payload = list;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "e5a0ca7a59993afb"
            ]
        ]
    },
    {
        "id": "45a8efad8d49c963",
        "type": "http in",
        "z": "183cdbb2e87f2393",
        "g": "d7f2e92eaaab36d3",
        "name": "",
        "url": "/archive",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "58d035e75f20cb01"
            ]
        ]
    },
    {
        "id": "58d035e75f20cb01",
        "type": "function",
        "z": "183cdbb2e87f2393",
        "g": "d7f2e92eaaab36d3",
        "name": "Validate request",
        "func": "if( !msg.payload.hasOwnProperty(\"name\") )\n    throw \"name is required\";\n\nif( !msg.payload.hasOwnProperty(\"time\") )\n    throw \"time is required\";\n\narchive = global.get(\"archive\") || {};\n\nsecret = msg.payload.hasOwnProperty(\"secret\")?msg.payload.secret:\"\";\n\nmsg.archive = null;\nfor(var id in archive )\n    if( archive[id].name === msg.payload.name && archive[id].secret === secret && archive[id].timestamp === msg.payload.time ) {\n        msg.archive = archive[id];\n        msg.archive.id = id;\n    }\n\nif( !msg.archive ) \n    throw 'Archive ' + msg.payload.name + \" does not exists\";\n\nmsg.payload = msg.archive;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 320,
        "wires": [
            [
                "f3ba4a09beb9869a"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "87462717bf34d56b",
        "type": "link out",
        "z": "7d50268eb1d2e7e8",
        "name": "",
        "links": [
            "62c5063823236694"
        ],
        "x": 1235,
        "y": 1000,
        "wires": []
    },
    {
        "id": "ef6cb4fc70959ef2",
        "type": "comment",
        "z": "7d50268eb1d2e7e8",
        "name": "Error",
        "info": "",
        "x": 1310,
        "y": 1000,
        "wires": []
    },
    {
        "id": "278be4603f94e70a",
        "type": "link out",
        "z": "7d50268eb1d2e7e8",
        "name": "",
        "links": [
            "62c5063823236694"
        ],
        "x": 875,
        "y": 1180,
        "wires": []
    },
    {
        "id": "68dca178ce5f7a19",
        "type": "comment",
        "z": "7d50268eb1d2e7e8",
        "name": "Error",
        "info": "",
        "x": 950,
        "y": 1180,
        "wires": []
    },
    {
        "id": "58d39cd96c2510b8",
        "type": "http in",
        "z": "7d50268eb1d2e7e8",
        "g": "0edbc15e7e162394",
        "name": "",
        "url": "/image",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1140,
        "wires": [
            [
                "a16534ccd25695a5"
            ]
        ]
    },
    {
        "id": "a16534ccd25695a5",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "0edbc15e7e162394",
        "name": "Validate request",
        "func": "if( !msg.payload.hasOwnProperty(\"name\") ) {\n    msg.payload = {\n        message: \"Missing name\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nmsg.payload.secret = msg.payload.secret || \"\";\n\nmsg.timelapse = null;\ntimelapse = global.get(\"timelapse\") || {};\nfor(var id in timelapse ) {\n    if( timelapse[id].name === msg.payload.name && timelapse[id].secret ===  msg.payload.secret)\n        msg.timelapse = timelapse[id];\n}\n\nif( !msg.timelapse ) {\n    msg.payload = {\n        message: msg.payload.name + \" does not exists\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif( typeof msg.payload.image !== \"string\") { //Indicates not Base64\n    msg.payload = {\n        message: \"Invalid image format.  Needs to be base64 encoded\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif( typeof msg.payload.image.length < 500) { //Indicates not Base64\n    msg.payload = {\n        message: \"Invalid image format.  Needs to be base64 encoded\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nmsg.payload = msg.payload.image;\n\nnode.send([msg,null]);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1140,
        "wires": [
            [
                "6947b75d87931811"
            ],
            [
                "3930fe216c3bf2c3"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "6947b75d87931811",
        "type": "base64",
        "z": "7d50268eb1d2e7e8",
        "g": "0edbc15e7e162394",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 580,
        "y": 1140,
        "wires": [
            [
                "ae708f1ac50c2eb9"
            ]
        ]
    },
    {
        "id": "ae708f1ac50c2eb9",
        "type": "subflow:f31f5c9c29d86393",
        "z": "7d50268eb1d2e7e8",
        "g": "0edbc15e7e162394",
        "name": "",
        "env": [],
        "x": 750,
        "y": 1140,
        "wires": [
            [
                "5a080eda62bd97f7"
            ],
            [
                "278be4603f94e70a"
            ]
        ]
    },
    {
        "id": "5a080eda62bd97f7",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "0edbc15e7e162394",
        "name": "Response",
        "func": "item = JSON.parse(JSON.stringify(msg.timelapse));\ndelete item.id;\ndelete item.secret;\ndelete item.filepath;\ndelete item.imageSize;\n\nmsg.payload = item;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1140,
        "wires": [
            [
                "1069436ab18ba94d",
                "8ecc036f108018ff"
            ]
        ]
    },
    {
        "id": "1069436ab18ba94d",
        "type": "http response",
        "z": "7d50268eb1d2e7e8",
        "g": "0edbc15e7e162394",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "8ecc036f108018ff",
        "type": "link out",
        "z": "7d50268eb1d2e7e8",
        "g": "0edbc15e7e162394",
        "name": "",
        "links": [
            "47142e0d89ef9c11"
        ],
        "x": 1075,
        "y": 1180,
        "wires": []
    },
    {
        "id": "7e8356fd90928f82",
        "type": "comment",
        "z": "7d50268eb1d2e7e8",
        "g": "0edbc15e7e162394",
        "name": "Update user dashboard",
        "info": "",
        "x": 1200,
        "y": 1180,
        "wires": []
    },
    {
        "id": "6d339f36614b6226",
        "type": "comment",
        "z": "7d50268eb1d2e7e8",
        "g": "0edbc15e7e162394",
        "name": "Error",
        "info": "",
        "x": 610,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3930fe216c3bf2c3",
        "type": "link out",
        "z": "7d50268eb1d2e7e8",
        "g": "0edbc15e7e162394",
        "name": "",
        "links": [
            "62c5063823236694"
        ],
        "x": 535,
        "y": 1180,
        "wires": []
    },
    {
        "id": "ccad7f91a1bb34ec",
        "type": "http in",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "",
        "url": "/capture",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 960,
        "wires": [
            [
                "eeace0a363fbb268"
            ]
        ]
    },
    {
        "id": "18b5d6ef86dd6758",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "capture",
        "func": "msg.address = msg.payload.address;\nmsg.user = msg.payload.user;\nmsg.password = msg.payload.password;\nmsg.resolution = msg.timelapse.width + \"x\" + msg.timelapse.height;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 960,
        "wires": [
            [
                "e85bcaa7e210176a"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "e85bcaa7e210176a",
        "type": "axis-camera",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "",
        "preset": "9ffd68a3.cf5118",
        "action": "JPEG Image",
        "resolution": "640x360",
        "output": "Buffer",
        "filename": "",
        "options": "",
        "x": 750,
        "y": 960,
        "wires": [
            [
                "c84f3ad565301c5d"
            ]
        ]
    },
    {
        "id": "c84f3ad565301c5d",
        "type": "switch",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "OK?",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 960,
        "wires": [
            [
                "cd8c29941779abf3"
            ],
            [
                "02cb48181497cb30"
            ]
        ]
    },
    {
        "id": "02cb48181497cb30",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "message",
        "func": "msg.payload = {\n    message:\"Image capture failed.  Check address,user,password or resolution\",\n    error: msg.error\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1000,
        "wires": [
            [
                "87462717bf34d56b"
            ]
        ]
    },
    {
        "id": "eeace0a363fbb268",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "Validate input",
        "func": "if( !msg.payload.hasOwnProperty(\"name\") ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"Missing name\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nsecret = msg.payload.secret || \"\";\n\nmsg.timelapse = null;\ntimelapse = global.get(\"timelapse\") || {};\nfor(var id in timelapse ) {\n    if( timelapse[id].name === msg.payload.name && timelapse[id].secret === secret)\n        msg.timelapse = timelapse[id];\n}\n\nif( !msg.timelapse ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: msg.payload.name + \" does not exists\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif(!msg.payload.hasOwnProperty(\"address\") || msg.payload.address < 5 ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"Camera address required\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif(!msg.payload.hasOwnProperty(\"user\") || msg.payload.user < 2 ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"Camera user required\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nif(!msg.payload.hasOwnProperty(\"password\") || msg.payload.password < 2 ) {\n    msg.statusCode = 400;\n    msg.payload = {\n        message: \"Camera password required\",\n        error: \"Invalid input\"\n    }\n    node.send([null,msg]);\n    return;\n}\n\nnode.send([msg,null]);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 960,
        "wires": [
            [
                "18b5d6ef86dd6758"
            ],
            [
                "a2e3d97b19daf769"
            ]
        ],
        "info": "00  DWORD LIST_RIFF;        // \"RIFF\"\n01  DWORD RIFF_size;        // \n02  DWORD RIFF_FOURCC;      // \"avi \"\n03  DWORD LIST_HDRL;         // \"LIST\"\n04  DWORD hdrl_size;         // 208\n05  DWORD hdrl_name;         // \"hdrl\"\n06  DWORD avih;              // \"avih\"\n07 DWORD avih_size;         // 56\n08  DWORD AVIH_MicroSecPerFrame;\n09  DWORD AVIH_MaxBytesPerSec;\n10  DWORD AVIH_PaddingGranularity;\n11  DWORD AVIH_Flags;\n12  DWORD AVIH_TotalFrames;\n13  DWORD AVIH_InitialFrames;\n14  DWORD AVIH_Streams;\n15  DWORD AVIH_SugestedBufferSize;\n16  DWORD AVIH_Width;\n17  DWORD AVIH_Height;\n18  DWORD AVIH_Reserved1;\n19  DWORD AVIH_Reserved2;\n20  DWORD AVIH_Reserved3;\n21  DWORD AVIH_Reserved4;\n22  DWORD LIST_strl;          // \"LIST\"\n23  DWORD LIST_strl_size;     // 132\n24  DWORD LIST_strl_name;     // \"strl\"\n25  DWORD STRH_name;          // \"strh\"\n26  DWORD STRH_size;          // 48\n27  DWORD strh_fccType;\n28  DWORD strh_fccHandler;\n29  DWORD strh_flags;\n30  DWORD strh_priority;\n31  DWORD strh_init_frames;\n32  DWORD strh_scale;\n33  DWORD strh_rate;\n34  DWORD strh_start;\n45  DWORD strh_length;\n36  DWORD strh_sugg_buff_sz;\n37  DWORD strh_quality;\n38  DWORD strh_sample_sz;\n39  DWORD LIST_strf;          // \"strf\"\n40  DWORD strf_size_list;     // 40\n41  DWORD strf_size;          // 40\n42  DWORD strf_width;\n43  DWORD strf_height;\n44  DWORD strf_planes_bit_cnt;\n45  DWORD strf_compression;\n46  DWORD strf_image_size;\n47  DWORD strf_xpels_meter;\n48  DWORD strf_ypels_meter;\n49  DWORD strf_num_colors;\n50  DWORD strf_imp_colors;\n51  DWORD LIST_ODML;          // \"LIST\"\n52  DWORD LIST_ODML_Size;     // 16\n53  DWORD LIST_ODML_type;     // \"odml\"\n54  DWORD odml_fourCC;        // \"dmlh\"\n55  DWORD odml_size;          // 4\n56  DWORD odml_frames;  \n57  DWORD LIST_movi;          // \"LIST\"\n58  DWORD LIST_movi_size;     // SUM( JPEG data size) + (8 * frames) + 4\n59  DWORD LIST_movi_name;     // \"movi\"\n"
    },
    {
        "id": "e62e31cd643c869c",
        "type": "function",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "Response",
        "func": "item = JSON.parse(JSON.stringify(msg.timelapse));\ndelete item.id;\ndelete item.secret;\ndelete item.filepath;\ndelete item.imageSize;\n\nmsg.payload = item;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 960,
        "wires": [
            [
                "e3843400500f539d",
                "75e365a6c2fa1794"
            ]
        ]
    },
    {
        "id": "e3843400500f539d",
        "type": "http response",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1610,
        "y": 960,
        "wires": []
    },
    {
        "id": "cd8c29941779abf3",
        "type": "subflow:f31f5c9c29d86393",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "",
        "env": [],
        "x": 1090,
        "y": 960,
        "wires": [
            [
                "e62e31cd643c869c"
            ],
            [
                "87462717bf34d56b"
            ]
        ]
    },
    {
        "id": "75e365a6c2fa1794",
        "type": "link out",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "",
        "links": [
            "47142e0d89ef9c11"
        ],
        "x": 1575,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a2e3d97b19daf769",
        "type": "link out",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "",
        "links": [
            "62c5063823236694"
        ],
        "x": 535,
        "y": 1000,
        "wires": []
    },
    {
        "id": "ef3a997f66eaec09",
        "type": "comment",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "Error",
        "info": "",
        "x": 610,
        "y": 1000,
        "wires": []
    },
    {
        "id": "21bec4ac726449c7",
        "type": "comment",
        "z": "7d50268eb1d2e7e8",
        "g": "c5d12929be161928",
        "name": "Update user dashboard",
        "info": "",
        "x": 1710,
        "y": 1000,
        "wires": []
    },
    {
        "id": "62c5063823236694",
        "type": "link in",
        "z": "7d50268eb1d2e7e8",
        "g": "26a659d088955f0f",
        "name": "",
        "links": [
            "a2e3d97b19daf769",
            "87462717bf34d56b",
            "3930fe216c3bf2c3",
            "278be4603f94e70a",
            "f5062ab91ada4a7f",
            "92af646766ac5ad1",
            "4e3b5b644dc6e9c8",
            "555d3dabe0d43d20"
        ],
        "x": 255,
        "y": 1320,
        "wires": [
            [
                "297615b654a5be95",
                "1bc5f45dd8a4176f"
            ]
        ]
    },
    {
        "id": "e3aaac9c5133260a",
        "type": "comment",
        "z": "7d50268eb1d2e7e8",
        "g": "26a659d088955f0f",
        "name": "Error",
        "info": "",
        "x": 160,
        "y": 1320,
        "wires": []
    },
    {
        "id": "297615b654a5be95",
        "type": "http response",
        "z": "7d50268eb1d2e7e8",
        "g": "26a659d088955f0f",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 360,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1bc5f45dd8a4176f",
        "type": "debug",
        "z": "7d50268eb1d2e7e8",
        "g": "26a659d088955f0f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1360,
        "wires": []
    },
    {
        "id": "e03510c59bef7961",
        "type": "comment",
        "z": "7d50268eb1d2e7e8",
        "g": "55c8b55270555e6d",
        "name": "Error",
        "info": "",
        "x": 630,
        "y": 820,
        "wires": []
    },
    {
        "id": "92af646766ac5ad1",
        "type": "link out",
        "z": "7d50268eb1d2e7e8",
        "g": "55c8b55270555e6d",
        "name": "",
        "links": [
            "62c5063823236694"
        ],
        "x": 555,
        "y": 820,
        "wires": []
    },
    {
        "id": "4e3b5b644dc6e9c8",
        "type": "link out",
        "z": "7d50268eb1d2e7e8",
        "g": "55c8b55270555e6d",
        "name": "",
        "links": [
            "62c5063823236694"
        ],
        "x": 735,
        "y": 820,
        "wires": []
    },
    {
        "id": "cdcde13037e32455",
        "type": "comment",
        "z": "7d50268eb1d2e7e8",
        "g": "55c8b55270555e6d",
        "name": "Error",
        "info": "",
        "x": 810,
        "y": 820,
        "wires": []
    },
    {
        "id": "555d3dabe0d43d20",
        "type": "link out",
        "z": "7d50268eb1d2e7e8",
        "g": "dcfdbaee23754ac3",
        "name": "",
        "links": [
            "62c5063823236694"
        ],
        "x": 575,
        "y": 640,
        "wires": []
    },
    {
        "id": "0c0da7e3bfb2ef0a",
        "type": "comment",
        "z": "7d50268eb1d2e7e8",
        "g": "dcfdbaee23754ac3",
        "name": "Error",
        "info": "",
        "x": 650,
        "y": 640,
        "wires": []
    },
    {
        "id": "adf50289d12a6e12",
        "type": "catch",
        "z": "183cdbb2e87f2393",
        "g": "2fdf6439b8d3cbac",
        "name": "",
        "scope": [
            "8d4003bf017c54f2",
            "58d035e75f20cb01"
        ],
        "uncaught": false,
        "x": 830,
        "y": 100,
        "wires": [
            [
                "4e3f03f701755b87"
            ]
        ]
    },
    {
        "id": "4e3f03f701755b87",
        "type": "change",
        "z": "183cdbb2e87f2393",
        "g": "2fdf6439b8d3cbac",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 100,
        "wires": [
            [
                "7fb28f3c9e95f8a3"
            ]
        ]
    },
    {
        "id": "cdcbdf282f7aec19",
        "type": "ui_template",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "group": "6d0232f0fd507b32",
        "name": "Name",
        "order": 4,
        "width": "5",
        "height": "1",
        "format": "<h3>{{msg.payload.name}}</h3>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 270,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "1184ef70d028bc09",
        "type": "ui_text",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "group": "6d0232f0fd507b32",
        "order": 5,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Date",
        "format": "{{msg.payload.archiveDate}}",
        "layout": "row-spread",
        "x": 270,
        "y": 320,
        "wires": []
    },
    {
        "id": "754a6258b902f464",
        "type": "ui_text",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "group": "6d0232f0fd507b32",
        "order": 6,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Size",
        "format": "{{msg.payload.filesize}}",
        "layout": "row-spread",
        "x": 270,
        "y": 360,
        "wires": []
    },
    {
        "id": "b0a6e8e0826a0415",
        "type": "ui_button",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "name": "",
        "group": "6d0232f0fd507b32",
        "order": 7,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "Delete",
        "topicType": "str",
        "x": 430,
        "y": 400,
        "wires": [
            [
                "3c326eea27d7b2ab"
            ]
        ]
    },
    {
        "id": "427c17891e478673",
        "type": "link in",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "name": "",
        "links": [
            "968e304998d8b490"
        ],
        "x": 135,
        "y": 280,
        "wires": [
            [
                "cdcbdf282f7aec19",
                "1184ef70d028bc09",
                "754a6258b902f464",
                "fe639b680fafff18"
            ]
        ]
    },
    {
        "id": "fe639b680fafff18",
        "type": "function",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "name": "Enabled",
        "func": "msg.enabled = msg.payload.name.length > 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 400,
        "wires": [
            [
                "b0a6e8e0826a0415"
            ]
        ]
    },
    {
        "id": "affc35a4690d508f",
        "type": "change",
        "z": "cff0ca7eba0f8f68",
        "g": "976bbd287bc7bf1b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 120,
        "wires": [
            [
                "968e304998d8b490"
            ]
        ]
    },
    {
        "id": "3507015ca4e9c18d",
        "type": "http request",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "name": "DELETE /archive",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "localhost:1880/archive",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 760,
        "y": 400,
        "wires": [
            [
                "5ff32edae7f11fec"
            ]
        ]
    },
    {
        "id": "5ff32edae7f11fec",
        "type": "function",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "name": "Message",
        "func": "if( msg.statusCode < 300 ) {\n    msg.highlight = \"green\";\n    msg.payload = \"Success\";\n} else {\n    msg.highlight = \"red\";\n    msg.payload = msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 400,
        "wires": [
            [
                "74460420d3dad6f3",
                "c1c7a9e50095f411"
            ]
        ]
    },
    {
        "id": "74460420d3dad6f3",
        "type": "ui_toast",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "position": "top right",
        "displayTime": "7",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1130,
        "y": 440,
        "wires": []
    },
    {
        "id": "3c326eea27d7b2ab",
        "type": "function",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "name": "",
        "func": "timelapse = flow.get(\"timelapse\");\nmsg.payload = {\n    name: timelapse.name,\n    time: timelapse.timestamp,\n    secret: global.get(\"secret\") || \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 400,
        "wires": [
            [
                "3507015ca4e9c18d"
            ]
        ]
    },
    {
        "id": "65ef8dfd89115830",
        "type": "http response",
        "z": "183cdbb2e87f2393",
        "g": "d7f2e92eaaab36d3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 320,
        "wires": []
    },
    {
        "id": "0e13bc8e03485ee4",
        "type": "function",
        "z": "183cdbb2e87f2393",
        "g": "d7f2e92eaaab36d3",
        "name": "Response",
        "func": "msg.payload = {\n    name: msg.archive.name,\n    time: msg.archive.timestamp,\n    size: msg.archive.size\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "65ef8dfd89115830"
            ]
        ]
    },
    {
        "id": "f3ba4a09beb9869a",
        "type": "function",
        "z": "183cdbb2e87f2393",
        "g": "d7f2e92eaaab36d3",
        "name": "Remove",
        "func": "archive = global.get(\"archive\");\ndelete archive[msg.payload.id];\nglobal.set(\"archive\",archive);\n\nmsg.payload = msg.payload.filepath;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 320,
        "wires": [
            [
                "8e81fda15faa3567"
            ]
        ]
    },
    {
        "id": "8e81fda15faa3567",
        "type": "exec",
        "z": "183cdbb2e87f2393",
        "g": "d7f2e92eaaab36d3",
        "command": "rm -R",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 730,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "0e13bc8e03485ee4",
                "a7f808a72db14723"
            ]
        ]
    },
    {
        "id": "add861c3b97f0b64",
        "type": "link in",
        "z": "cff0ca7eba0f8f68",
        "g": "976bbd287bc7bf1b",
        "name": "Refresh table",
        "links": [
            "c1c7a9e50095f411",
            "06212515f4be3a68"
        ],
        "x": 235,
        "y": 160,
        "wires": [
            [
                "b8a5f9df447e929a"
            ]
        ]
    },
    {
        "id": "ff3b6af679d085ea",
        "type": "comment",
        "z": "cff0ca7eba0f8f68",
        "g": "976bbd287bc7bf1b",
        "name": "Refresh",
        "info": "",
        "x": 170,
        "y": 160,
        "wires": []
    },
    {
        "id": "c1c7a9e50095f411",
        "type": "link out",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "name": "",
        "links": [
            "add861c3b97f0b64"
        ],
        "x": 1055,
        "y": 400,
        "wires": []
    },
    {
        "id": "832cc8d569fe26d7",
        "type": "comment",
        "z": "cff0ca7eba0f8f68",
        "g": "804f05cfa9ec951c",
        "name": "Refresh",
        "info": "",
        "x": 1130,
        "y": 400,
        "wires": []
    },
    {
        "id": "c63c71bff9323edd",
        "type": "ui_template",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "group": "c7561ec130ac6106",
        "name": "Name",
        "order": 4,
        "width": "5",
        "height": "1",
        "format": "<h3>{{msg.payload.name}}</h3>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 270,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "85e0195528ad6c29",
        "type": "ui_text",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "group": "c7561ec130ac6106",
        "order": 5,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Frames",
        "format": "{{msg.payload.frames}}",
        "layout": "row-spread",
        "x": 280,
        "y": 380,
        "wires": []
    },
    {
        "id": "683026f5abdeb93e",
        "type": "ui_text",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "group": "c7561ec130ac6106",
        "order": 6,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Size",
        "format": "{{msg.payload.filesize}}",
        "layout": "row-spread",
        "x": 270,
        "y": 420,
        "wires": []
    },
    {
        "id": "daa94d149b810b2e",
        "type": "ui_button",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "",
        "group": "c7561ec130ac6106",
        "order": 10,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "Flush",
        "tooltip": "",
        "color": "",
        "bgcolor": "orange",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Flush",
        "topicType": "str",
        "x": 450,
        "y": 540,
        "wires": [
            [
                "859bb103856e8884"
            ]
        ]
    },
    {
        "id": "40f55f35828ad9da",
        "type": "function",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "Enabled",
        "func": "msg.enabled = msg.payload.name.length > 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 540,
        "wires": [
            [
                "daa94d149b810b2e"
            ]
        ]
    },
    {
        "id": "4b64f0e51937086e",
        "type": "function",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "Message",
        "func": "if( msg.statusCode < 300 ) {\n    msg.highlight = \"green\";\n    msg.payload = \"Success\";\n} else {\n    msg.highlight = \"red\";\n    msg.payload = msg.payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 540,
        "wires": [
            [
                "a21d483b280506f7",
                "160d4fec656db880"
            ]
        ]
    },
    {
        "id": "a21d483b280506f7",
        "type": "ui_toast",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "position": "top right",
        "displayTime": "7",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1210,
        "y": 540,
        "wires": []
    },
    {
        "id": "160d4fec656db880",
        "type": "link out",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "",
        "links": [
            "47142e0d89ef9c11"
        ],
        "x": 1135,
        "y": 580,
        "wires": []
    },
    {
        "id": "d66c7209eac2455b",
        "type": "comment",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "Refresh",
        "info": "",
        "x": 1210,
        "y": 580,
        "wires": []
    },
    {
        "id": "82291db04b34ba0d",
        "type": "link out",
        "z": "596071a8177474d8",
        "g": "fa3b69d68608e3ed",
        "name": "",
        "links": [
            "77425db410507033"
        ],
        "x": 1515,
        "y": 140,
        "wires": []
    },
    {
        "id": "77425db410507033",
        "type": "link in",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "",
        "links": [
            "82291db04b34ba0d"
        ],
        "x": 125,
        "y": 340,
        "wires": [
            [
                "c63c71bff9323edd",
                "85e0195528ad6c29",
                "683026f5abdeb93e",
                "40f55f35828ad9da",
                "ef4d2e7c64d9477c",
                "43fed886f221ab6a",
                "326b50c660a63473"
            ]
        ]
    },
    {
        "id": "326b50c660a63473",
        "type": "ui_text",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "group": "c7561ec130ac6106",
        "order": 7,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Resolution",
        "format": "{{msg.payload.resolution}}",
        "layout": "row-spread",
        "x": 290,
        "y": 460,
        "wires": []
    },
    {
        "id": "ef4d2e7c64d9477c",
        "type": "ui_text",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "group": "c7561ec130ac6106",
        "order": 8,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "FPS",
        "format": "{{msg.payload.fps}}",
        "layout": "row-spread",
        "x": 270,
        "y": 500,
        "wires": []
    },
    {
        "id": "e720155085572cb5",
        "type": "ui_button",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "",
        "group": "c7561ec130ac6106",
        "order": 9,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "Archive",
        "tooltip": "",
        "color": "",
        "bgcolor": "blue",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Archive",
        "topicType": "str",
        "x": 460,
        "y": 580,
        "wires": [
            [
                "4f524ce35298faba"
            ]
        ]
    },
    {
        "id": "43fed886f221ab6a",
        "type": "function",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "Enabled",
        "func": "msg.enabled = msg.payload.name.length > 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 580,
        "wires": [
            [
                "e720155085572cb5"
            ]
        ]
    },
    {
        "id": "859bb103856e8884",
        "type": "function",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "Request",
        "func": "timelapse = flow.get(\"timelapse\");\nif(!timelapse) {\n    node.warn(\"No timelapse defined\");\n    return;\n}\n\nmsg.payload = {\n    name: timelapse.name,\n    width: timelapse.width,\n    height: timelapse.height,\n    fps: timelapse.fps,\n    archive: timelapse.archive,\n    retention: timelapse.retention,\n    secret: global.get(\"secret\") || \"\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 540,
        "wires": [
            [
                "eb4fcc54e06b4bb4"
            ]
        ]
    },
    {
        "id": "eb4fcc54e06b4bb4",
        "type": "http request",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "POST /timelapse",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "localhost:1880/timelapse",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 790,
        "y": 540,
        "wires": [
            [
                "4b64f0e51937086e"
            ]
        ]
    },
    {
        "id": "d13593f7b0591f4f",
        "type": "http request",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "PUT /archive",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "localhost:1880/archive",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 810,
        "y": 580,
        "wires": [
            [
                "4b64f0e51937086e"
            ]
        ]
    },
    {
        "id": "4f524ce35298faba",
        "type": "function",
        "z": "596071a8177474d8",
        "g": "5451340ed7bfaccb",
        "name": "Request",
        "func": "timelapse = flow.get(\"timelapse\");\nif(!timelapse) {\n    node.warn(\"No timelapse defined\");\n    return;\n}\n\nmsg.payload = {\n    name: timelapse.name,\n    secret: global.get(\"secret\") || \"\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 580,
        "wires": [
            [
                "d13593f7b0591f4f"
            ]
        ]
    },
    {
        "id": "40b7852c53b8f35f",
        "type": "change",
        "z": "596071a8177474d8",
        "g": "fa3b69d68608e3ed",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "timelapse",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 140,
        "wires": [
            [
                "82291db04b34ba0d"
            ]
        ]
    },
    {
        "id": "164871d3bf340384",
        "type": "exec",
        "z": "183cdbb2e87f2393",
        "g": "51fa23c3767845f4",
        "command": "rm -R",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1230,
        "y": 1000,
        "wires": [
            [],
            [],
            [
                "06212515f4be3a68"
            ]
        ]
    },
    {
        "id": "1ef03b4d671a04fa",
        "type": "function",
        "z": "183cdbb2e87f2393",
        "g": "51fa23c3767845f4",
        "name": "Remove",
        "func": "id = msg.payload.filepath.substr(0,msg.payload.filepath.length-1);\n\narchive = global.get(\"archive\");\ndelete archive[id];\nglobal.set(\"archive\",archive);\n\nmsg.payload = id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1000,
        "wires": [
            [
                "164871d3bf340384"
            ]
        ]
    },
    {
        "id": "a7f808a72db14723",
        "type": "debug",
        "z": "183cdbb2e87f2393",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 400,
        "wires": []
    },
    {
        "id": "06212515f4be3a68",
        "type": "link out",
        "z": "183cdbb2e87f2393",
        "name": "",
        "links": [
            "add861c3b97f0b64"
        ],
        "x": 1355,
        "y": 1000,
        "wires": []
    }
]